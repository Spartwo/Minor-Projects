package TestingApplicationv1;
import java.io.File;
import java.sql.*;
import javax.swing.JOptionPane;
import javax.swing.ImageIcon;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */



/**
 *
 * @author spart
 */
public class MainForm extends javax.swing.JFrame {
    public String url = "jdbc:sqlite:c:/mydb/kwhite.db";
    /**
     * Creates new form FormA
     */
    public MainForm() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        MainTabbedPane = new javax.swing.JTabbedPane();
        Logo = new javax.swing.JPanel();
        LogoLogo = new javax.swing.JLabel();
        LogoBackground = new javax.swing.JLabel();
        Items = new javax.swing.JPanel();
        ItemIDLabel = new javax.swing.JLabel();
        ItemNameLabel = new javax.swing.JLabel();
        ItemWeightLabel = new javax.swing.JLabel();
        ItemCostLabel = new javax.swing.JLabel();
        ItemStatLabel = new javax.swing.JLabel();
        ItemStatNameLabel = new javax.swing.JLabel();
        ManagerPasswordLabel_Items = new javax.swing.JLabel();
        ItemRemoveButton = new javax.swing.JButton();
        ItemSearchButton = new javax.swing.JButton();
        ItemClearButton = new javax.swing.JButton();
        ItemProgressBar = new javax.swing.JProgressBar();
        ManagerPasswordField_Items = new javax.swing.JPasswordField();
        ItemAddButton = new javax.swing.JButton();
        ItemIDField = new javax.swing.JTextField();
        ItemNameField = new javax.swing.JTextField();
        ItemWeightField = new javax.swing.JTextField();
        ItemCostField = new javax.swing.JTextField();
        ItemStatValueField = new javax.swing.JTextField();
        ItemUpdateButton = new javax.swing.JButton();
        ItemStatDropdown = new javax.swing.JComboBox<>();
        ItemLogo = new javax.swing.JLabel();
        ItemBackground = new javax.swing.JLabel();
        ItemImageBackdrop = new javax.swing.JLabel();
        ItemImage = new javax.swing.JLabel();
        Players = new javax.swing.JPanel();
        PlayerIDLabel = new javax.swing.JLabel();
        PlayerNameLabel = new javax.swing.JLabel();
        PlayerHealthLabel = new javax.swing.JLabel();
        PlayerLevelLabel = new javax.swing.JLabel();
        PlayerRemoveButton = new javax.swing.JButton();
        PlayerSearchButton = new javax.swing.JButton();
        PlayerClearButton = new javax.swing.JButton();
        PlayerAddButton = new javax.swing.JButton();
        PlayerIDField = new javax.swing.JTextField();
        PlayerNameField = new javax.swing.JTextField();
        PlayerHealthField = new javax.swing.JTextField();
        PlayerUpdateButton = new javax.swing.JButton();
        PlayerProgressBar = new javax.swing.JProgressBar();
        ManagerPasswordLabel_Players = new javax.swing.JLabel();
        ManagerPasswordField_Players = new javax.swing.JPasswordField();
        PlayerLevelSlider = new javax.swing.JSlider();
        PlayersLogo = new javax.swing.JLabel();
        PlayersBackground = new javax.swing.JLabel();
        PlayerImage = new javax.swing.JLabel();
        PlayerImageBackground = new javax.swing.JLabel();
        Skills = new javax.swing.JPanel();
        SkillsIDLabel = new javax.swing.JLabel();
        SkillsNameLabel = new javax.swing.JLabel();
        SkillsValueLabel = new javax.swing.JLabel();
        SkillsRemoveButton = new javax.swing.JButton();
        SkillSearchButton = new javax.swing.JButton();
        SkillsClearButton = new javax.swing.JButton();
        SkillsAddButton = new javax.swing.JButton();
        SkillsNameField = new javax.swing.JTextField();
        SkillsIDField = new javax.swing.JTextField();
        SkillsValueField = new javax.swing.JTextField();
        SkillsUpdateButton = new javax.swing.JButton();
        SkillsProgressBar = new javax.swing.JProgressBar();
        SkillsLogo = new javax.swing.JLabel();
        SkillsBackground = new javax.swing.JLabel();
        Ownership = new javax.swing.JPanel();
        OwnershipPlayerIDLabel = new javax.swing.JLabel();
        OwnershipItemIDLabel = new javax.swing.JLabel();
        OwnershipIDLabel = new javax.swing.JLabel();
        OwnershipItemNameLabel = new javax.swing.JLabel();
        OwnershipRemoveButton = new javax.swing.JButton();
        OwnershipSearchButton = new javax.swing.JButton();
        OwnershipClearButton = new javax.swing.JButton();
        OwnershipAddButton = new javax.swing.JButton();
        OwnershipPlayerIDField = new javax.swing.JTextField();
        OwnershipItemIDField = new javax.swing.JTextField();
        OwnershipUpdateButton = new javax.swing.JButton();
        OwnershipDisplayButton = new javax.swing.JButton();
        OwnershipIDField = new javax.swing.JTextField();
        ManagerPasswordField_Ownership = new javax.swing.JPasswordField();
        ManagerPasswordLabel_Ownership = new javax.swing.JLabel();
        OwnershipProgressBar = new javax.swing.JProgressBar();
        OwnershipScrollPane = new javax.swing.JScrollPane();
        OwnershipItemList = new javax.swing.JTextArea();
        OwnershipLogo = new javax.swing.JLabel();
        OwnershipBackground = new javax.swing.JLabel();
        SkillsOwned = new javax.swing.JPanel();
        PSPlayerIDLabel = new javax.swing.JLabel();
        PSSkillIDLabel = new javax.swing.JLabel();
        PSRemoveButton = new javax.swing.JButton();
        PSSearchButton = new javax.swing.JButton();
        PSClearButton = new javax.swing.JButton();
        PSAddButton = new javax.swing.JButton();
        PSPlayerIDField = new javax.swing.JTextField();
        PSSkillIDField = new javax.swing.JTextField();
        PSUpdateButton = new javax.swing.JButton();
        PSDisplayButton = new javax.swing.JButton();
        PSIDField = new javax.swing.JTextField();
        PSIDLabel = new javax.swing.JLabel();
        PSProgressBar = new javax.swing.JProgressBar();
        ManagerPasswordLabel_SkillOwnership = new javax.swing.JLabel();
        ManagerPasswordField_SkillOwnership = new javax.swing.JPasswordField();
        PSScrollPane = new javax.swing.JScrollPane();
        PSItemList = new javax.swing.JTextArea();
        PSLogo = new javax.swing.JLabel();
        PSBackground = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(102, 204, 255));

        MainTabbedPane.setBackground(new java.awt.Color(72, 62, 33));
        MainTabbedPane.setFont(new java.awt.Font("Papyrus", 1, 13)); // NOI18N

        Logo.setBackground(new java.awt.Color(51, 51, 51));
        Logo.setLayout(null);

        LogoLogo.setBackground(new java.awt.Color(51, 51, 51));
        LogoLogo.setForeground(new java.awt.Color(51, 51, 51));
        LogoLogo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/TestingApplicationv1/Logo_Large.png"))); // NOI18N
        Logo.add(LogoLogo);
        LogoLogo.setBounds(50, 11, 564, 301);

        LogoBackground.setBackground(new java.awt.Color(51, 51, 51));
        LogoBackground.setForeground(new java.awt.Color(51, 51, 51));
        LogoBackground.setIcon(new javax.swing.ImageIcon(getClass().getResource("/TestingApplicationv1/Background.png"))); // NOI18N
        Logo.add(LogoBackground);
        LogoBackground.setBounds(-26, -39, 690, 400);

        MainTabbedPane.addTab("Logo", Logo);

        Items.setLayout(null);

        ItemIDLabel.setFont(new java.awt.Font("Papyrus", 1, 14)); // NOI18N
        ItemIDLabel.setText("Item ID");
        Items.add(ItemIDLabel);
        ItemIDLabel.setBounds(25, 80, 100, 25);

        ItemNameLabel.setFont(new java.awt.Font("Papyrus", 1, 14)); // NOI18N
        ItemNameLabel.setText("Item Name");
        Items.add(ItemNameLabel);
        ItemNameLabel.setBounds(25, 115, 100, 25);

        ItemWeightLabel.setFont(new java.awt.Font("Papyrus", 1, 14)); // NOI18N
        ItemWeightLabel.setText("Weight");
        Items.add(ItemWeightLabel);
        ItemWeightLabel.setBounds(25, 150, 100, 25);

        ItemCostLabel.setFont(new java.awt.Font("Papyrus", 1, 14)); // NOI18N
        ItemCostLabel.setText("Cost");
        Items.add(ItemCostLabel);
        ItemCostLabel.setBounds(181, 150, 100, 25);

        ItemStatLabel.setFont(new java.awt.Font("Papyrus", 1, 14)); // NOI18N
        ItemStatLabel.setText("Item Stat");
        Items.add(ItemStatLabel);
        ItemStatLabel.setBounds(337, 150, 100, 25);

        ItemStatNameLabel.setFont(new java.awt.Font("Papyrus", 1, 14)); // NOI18N
        ItemStatNameLabel.setText("Stat Value");
        Items.add(ItemStatNameLabel);
        ItemStatNameLabel.setBounds(495, 150, 100, 25);

        ManagerPasswordLabel_Items.setBackground(new java.awt.Color(255, 255, 255));
        ManagerPasswordLabel_Items.setFont(new java.awt.Font("Papyrus", 1, 14)); // NOI18N
        ManagerPasswordLabel_Items.setText("Manager Password");
        Items.add(ManagerPasswordLabel_Items);
        ManagerPasswordLabel_Items.setBounds(100, 10, 140, 30);

        ItemRemoveButton.setBackground(new java.awt.Color(72, 62, 33));
        ItemRemoveButton.setFont(new java.awt.Font("Papyrus", 1, 14)); // NOI18N
        ItemRemoveButton.setForeground(new java.awt.Color(255, 255, 255));
        ItemRemoveButton.setText("Remove");
        ItemRemoveButton.setPreferredSize(new java.awt.Dimension(101, 31));
        ItemRemoveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ItemRemoveButtonActionPerformed(evt);
            }
        });
        Items.add(ItemRemoveButton);
        ItemRemoveButton.setBounds(265, 270, 100, 35);

        ItemSearchButton.setBackground(new java.awt.Color(72, 62, 33));
        ItemSearchButton.setFont(new java.awt.Font("Papyrus", 1, 14)); // NOI18N
        ItemSearchButton.setForeground(new java.awt.Color(255, 255, 255));
        ItemSearchButton.setText("Search");
        ItemSearchButton.setPreferredSize(new java.awt.Dimension(101, 31));
        ItemSearchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ItemSearchButtonActionPerformed(evt);
            }
        });
        Items.add(ItemSearchButton);
        ItemSearchButton.setBounds(25, 270, 100, 35);

        ItemClearButton.setBackground(new java.awt.Color(72, 62, 33));
        ItemClearButton.setFont(new java.awt.Font("Papyrus", 1, 14)); // NOI18N
        ItemClearButton.setForeground(new java.awt.Color(255, 255, 255));
        ItemClearButton.setText("Clear All");
        ItemClearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ItemClearButtonActionPerformed(evt);
            }
        });
        Items.add(ItemClearButton);
        ItemClearButton.setBounds(515, 270, 100, 35);

        ItemProgressBar.setBackground(new java.awt.Color(72, 62, 33));
        ItemProgressBar.setForeground(new java.awt.Color(222, 205, 134));
        Items.add(ItemProgressBar);
        ItemProgressBar.setBounds(25, 230, 590, 20);

        ManagerPasswordField_Items.setBackground(new java.awt.Color(195, 176, 103));
        ManagerPasswordField_Items.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        ManagerPasswordField_Items.setText("jPasswordField1");
        ManagerPasswordField_Items.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                ManagerPasswordField_ItemsFocusLost(evt);
            }
        });
        Items.add(ManagerPasswordField_Items);
        ManagerPasswordField_Items.setBounds(100, 40, 140, 20);

        ItemAddButton.setBackground(new java.awt.Color(72, 62, 33));
        ItemAddButton.setFont(new java.awt.Font("Papyrus", 1, 14)); // NOI18N
        ItemAddButton.setForeground(new java.awt.Color(255, 255, 255));
        ItemAddButton.setText("Add");
        ItemAddButton.setPreferredSize(new java.awt.Dimension(101, 31));
        ItemAddButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ItemAddButtonActionPerformed(evt);
            }
        });
        Items.add(ItemAddButton);
        ItemAddButton.setBounds(145, 270, 100, 35);

        ItemIDField.setBackground(new java.awt.Color(195, 176, 103));
        ItemIDField.setFont(new java.awt.Font("Papyrus", 1, 10)); // NOI18N
        ItemIDField.setText("Enter Item ID");
        Items.add(ItemIDField);
        ItemIDField.setBounds(140, 80, 240, 25);

        ItemNameField.setBackground(new java.awt.Color(195, 176, 103));
        ItemNameField.setFont(new java.awt.Font("Papyrus", 1, 10)); // NOI18N
        ItemNameField.setText("Enter Item Name");
        Items.add(ItemNameField);
        ItemNameField.setBounds(140, 115, 240, 25);

        ItemWeightField.setBackground(new java.awt.Color(195, 176, 103));
        ItemWeightField.setFont(new java.awt.Font("Papyrus", 1, 10)); // NOI18N
        ItemWeightField.setText("Enter Weight");
        Items.add(ItemWeightField);
        ItemWeightField.setBounds(25, 180, 120, 25);

        ItemCostField.setBackground(new java.awt.Color(195, 176, 103));
        ItemCostField.setFont(new java.awt.Font("Papyrus", 1, 10)); // NOI18N
        ItemCostField.setText("Enter Cost");
        Items.add(ItemCostField);
        ItemCostField.setBounds(180, 180, 120, 25);

        ItemStatValueField.setBackground(new java.awt.Color(195, 176, 103));
        ItemStatValueField.setFont(new java.awt.Font("Papyrus", 1, 10)); // NOI18N
        ItemStatValueField.setText("Enter Stat Value");
        Items.add(ItemStatValueField);
        ItemStatValueField.setBounds(495, 180, 120, 25);

        ItemUpdateButton.setBackground(new java.awt.Color(72, 62, 33));
        ItemUpdateButton.setFont(new java.awt.Font("Papyrus", 1, 14)); // NOI18N
        ItemUpdateButton.setForeground(new java.awt.Color(255, 255, 255));
        ItemUpdateButton.setText("Update");
        ItemUpdateButton.setMaximumSize(new java.awt.Dimension(101, 31));
        ItemUpdateButton.setMinimumSize(new java.awt.Dimension(101, 31));
        ItemUpdateButton.setPreferredSize(new java.awt.Dimension(101, 31));
        ItemUpdateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ItemUpdateButtonActionPerformed(evt);
            }
        });
        Items.add(ItemUpdateButton);
        ItemUpdateButton.setBounds(390, 270, 100, 35);

        ItemStatDropdown.setBackground(new java.awt.Color(195, 176, 103));
        ItemStatDropdown.setFont(new java.awt.Font("Papyrus", 1, 10)); // NOI18N
        ItemStatDropdown.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Kinetic", "Frost", "Fire", "Poison" }));
        Items.add(ItemStatDropdown);
        ItemStatDropdown.setBounds(335, 180, 120, 25);

        ItemLogo.setBackground(new java.awt.Color(51, 51, 51));
        ItemLogo.setForeground(new java.awt.Color(51, 51, 51));
        ItemLogo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/TestingApplicationv1/Logo_Small.png"))); // NOI18N
        Items.add(ItemLogo);
        ItemLogo.setBounds(20, 0, 70, 70);

        ItemBackground.setBackground(new java.awt.Color(51, 51, 51));
        ItemBackground.setForeground(new java.awt.Color(51, 51, 51));
        ItemBackground.setIcon(new javax.swing.ImageIcon(getClass().getResource("/TestingApplicationv1/Background.png"))); // NOI18N
        Items.add(ItemBackground);
        ItemBackground.setBounds(0, 0, 640, 340);

        ItemImageBackdrop.setBackground(new java.awt.Color(222, 205, 134));
        ItemImageBackdrop.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        ItemImageBackdrop.setIcon(new javax.swing.ImageIcon(getClass().getResource("/TestingApplicationv1/ItemImageBackground.png"))); // NOI18N
        Items.add(ItemImageBackdrop);
        ItemImageBackdrop.setBounds(410, 40, 200, 100);

        ItemImage.setBackground(new java.awt.Color(222, 205, 134));
        ItemImage.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Items.add(ItemImage);
        ItemImage.setBounds(410, 40, 200, 100);

        MainTabbedPane.addTab("Items", Items);

        Players.setLayout(null);

        PlayerIDLabel.setFont(new java.awt.Font("Papyrus", 1, 14)); // NOI18N
        PlayerIDLabel.setText("Player ID");
        Players.add(PlayerIDLabel);
        PlayerIDLabel.setBounds(25, 80, 100, 25);

        PlayerNameLabel.setFont(new java.awt.Font("Papyrus", 1, 14)); // NOI18N
        PlayerNameLabel.setText("Player Name");
        Players.add(PlayerNameLabel);
        PlayerNameLabel.setBounds(25, 115, 100, 25);

        PlayerHealthLabel.setFont(new java.awt.Font("Papyrus", 1, 14)); // NOI18N
        PlayerHealthLabel.setText("Player Health");
        Players.add(PlayerHealthLabel);
        PlayerHealthLabel.setBounds(25, 150, 100, 25);

        PlayerLevelLabel.setFont(new java.awt.Font("Papyrus", 1, 14)); // NOI18N
        PlayerLevelLabel.setText("Player Level");
        Players.add(PlayerLevelLabel);
        PlayerLevelLabel.setBounds(25, 185, 100, 25);

        PlayerRemoveButton.setBackground(new java.awt.Color(72, 62, 33));
        PlayerRemoveButton.setFont(new java.awt.Font("Papyrus", 1, 14)); // NOI18N
        PlayerRemoveButton.setForeground(new java.awt.Color(255, 255, 255));
        PlayerRemoveButton.setText("Remove");
        PlayerRemoveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PlayerRemoveButtonActionPerformed(evt);
            }
        });
        Players.add(PlayerRemoveButton);
        PlayerRemoveButton.setBounds(265, 270, 100, 35);

        PlayerSearchButton.setBackground(new java.awt.Color(72, 62, 33));
        PlayerSearchButton.setFont(new java.awt.Font("Papyrus", 1, 14)); // NOI18N
        PlayerSearchButton.setForeground(new java.awt.Color(255, 255, 255));
        PlayerSearchButton.setText("Search");
        PlayerSearchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PlayerSearchButtonActionPerformed(evt);
            }
        });
        Players.add(PlayerSearchButton);
        PlayerSearchButton.setBounds(25, 270, 100, 35);

        PlayerClearButton.setBackground(new java.awt.Color(72, 62, 33));
        PlayerClearButton.setFont(new java.awt.Font("Papyrus", 1, 14)); // NOI18N
        PlayerClearButton.setForeground(new java.awt.Color(255, 255, 255));
        PlayerClearButton.setText("Clear All");
        PlayerClearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PlayerClearButtonActionPerformed(evt);
            }
        });
        Players.add(PlayerClearButton);
        PlayerClearButton.setBounds(515, 270, 100, 35);

        PlayerAddButton.setBackground(new java.awt.Color(72, 62, 33));
        PlayerAddButton.setFont(new java.awt.Font("Papyrus", 1, 14)); // NOI18N
        PlayerAddButton.setForeground(new java.awt.Color(255, 255, 255));
        PlayerAddButton.setText("Add");
        PlayerAddButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PlayerAddButtonActionPerformed(evt);
            }
        });
        Players.add(PlayerAddButton);
        PlayerAddButton.setBounds(145, 270, 100, 35);

        PlayerIDField.setBackground(new java.awt.Color(195, 176, 103));
        PlayerIDField.setFont(new java.awt.Font("Papyrus", 1, 10)); // NOI18N
        PlayerIDField.setText("Enter Player ID");
        Players.add(PlayerIDField);
        PlayerIDField.setBounds(140, 80, 240, 25);

        PlayerNameField.setBackground(new java.awt.Color(195, 176, 103));
        PlayerNameField.setFont(new java.awt.Font("Papyrus", 1, 10)); // NOI18N
        PlayerNameField.setText("Enter Player Name");
        Players.add(PlayerNameField);
        PlayerNameField.setBounds(140, 115, 240, 25);

        PlayerHealthField.setBackground(new java.awt.Color(195, 176, 103));
        PlayerHealthField.setFont(new java.awt.Font("Papyrus", 1, 10)); // NOI18N
        PlayerHealthField.setText("Enter Player Health");
        Players.add(PlayerHealthField);
        PlayerHealthField.setBounds(140, 150, 240, 25);

        PlayerUpdateButton.setBackground(new java.awt.Color(72, 62, 33));
        PlayerUpdateButton.setFont(new java.awt.Font("Papyrus", 1, 14)); // NOI18N
        PlayerUpdateButton.setForeground(new java.awt.Color(255, 255, 255));
        PlayerUpdateButton.setText("Update");
        PlayerUpdateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PlayerUpdateButtonActionPerformed(evt);
            }
        });
        Players.add(PlayerUpdateButton);
        PlayerUpdateButton.setBounds(390, 270, 100, 35);

        PlayerProgressBar.setBackground(new java.awt.Color(72, 62, 33));
        PlayerProgressBar.setForeground(new java.awt.Color(222, 205, 134));
        Players.add(PlayerProgressBar);
        PlayerProgressBar.setBounds(25, 230, 590, 20);

        ManagerPasswordLabel_Players.setBackground(new java.awt.Color(255, 255, 255));
        ManagerPasswordLabel_Players.setFont(new java.awt.Font("Papyrus", 1, 14)); // NOI18N
        ManagerPasswordLabel_Players.setText("Manager Password");
        Players.add(ManagerPasswordLabel_Players);
        ManagerPasswordLabel_Players.setBounds(100, 10, 140, 30);

        ManagerPasswordField_Players.setBackground(new java.awt.Color(195, 176, 103));
        ManagerPasswordField_Players.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        ManagerPasswordField_Players.setText("jPasswordField1");
        ManagerPasswordField_Players.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                ManagerPasswordField_PlayersFocusLost(evt);
            }
        });
        Players.add(ManagerPasswordField_Players);
        ManagerPasswordField_Players.setBounds(100, 40, 140, 20);

        PlayerLevelSlider.setBackground(new java.awt.Color(195, 176, 103));
        PlayerLevelSlider.setForeground(new java.awt.Color(0, 0, 0));
        Players.add(PlayerLevelSlider);
        PlayerLevelSlider.setBounds(140, 185, 240, 25);

        PlayersLogo.setBackground(new java.awt.Color(51, 51, 51));
        PlayersLogo.setForeground(new java.awt.Color(51, 51, 51));
        PlayersLogo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/TestingApplicationv1/Logo_Small.png"))); // NOI18N
        Players.add(PlayersLogo);
        PlayersLogo.setBounds(20, 0, 70, 70);

        PlayersBackground.setBackground(new java.awt.Color(51, 51, 51));
        PlayersBackground.setForeground(new java.awt.Color(51, 51, 51));
        PlayersBackground.setIcon(new javax.swing.ImageIcon(getClass().getResource("/TestingApplicationv1/Background.png"))); // NOI18N
        Players.add(PlayersBackground);
        PlayersBackground.setBounds(0, 0, 640, 340);

        PlayerImage.setBackground(new java.awt.Color(222, 205, 134));
        PlayerImage.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        PlayerImage.setIcon(new javax.swing.ImageIcon(getClass().getResource("/TestingApplicationv1/PlayerImageBackground.png"))); // NOI18N
        Players.add(PlayerImage);
        PlayerImage.setBounds(410, 40, 200, 170);

        PlayerImageBackground.setBackground(new java.awt.Color(222, 205, 134));
        Players.add(PlayerImageBackground);
        PlayerImageBackground.setBounds(410, 40, 200, 170);

        MainTabbedPane.addTab("Players", Players);

        Skills.setLayout(null);

        SkillsIDLabel.setFont(new java.awt.Font("Papyrus", 1, 14)); // NOI18N
        SkillsIDLabel.setText("Skill ID");
        Skills.add(SkillsIDLabel);
        SkillsIDLabel.setBounds(25, 80, 100, 25);

        SkillsNameLabel.setFont(new java.awt.Font("Papyrus", 1, 14)); // NOI18N
        SkillsNameLabel.setText("Skill Name");
        Skills.add(SkillsNameLabel);
        SkillsNameLabel.setBounds(25, 115, 100, 25);

        SkillsValueLabel.setFont(new java.awt.Font("Papyrus", 1, 14)); // NOI18N
        SkillsValueLabel.setText("Skill Value");
        Skills.add(SkillsValueLabel);
        SkillsValueLabel.setBounds(25, 150, 100, 25);

        SkillsRemoveButton.setBackground(new java.awt.Color(72, 62, 33));
        SkillsRemoveButton.setFont(new java.awt.Font("Papyrus", 1, 14)); // NOI18N
        SkillsRemoveButton.setForeground(new java.awt.Color(255, 255, 255));
        SkillsRemoveButton.setText("Remove");
        SkillsRemoveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SkillsRemoveButtonActionPerformed(evt);
            }
        });
        Skills.add(SkillsRemoveButton);
        SkillsRemoveButton.setBounds(265, 270, 100, 35);

        SkillSearchButton.setBackground(new java.awt.Color(72, 62, 33));
        SkillSearchButton.setFont(new java.awt.Font("Papyrus", 1, 14)); // NOI18N
        SkillSearchButton.setForeground(new java.awt.Color(255, 255, 255));
        SkillSearchButton.setText("Search");
        SkillSearchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SkillSearchButtonActionPerformed(evt);
            }
        });
        Skills.add(SkillSearchButton);
        SkillSearchButton.setBounds(25, 270, 100, 35);

        SkillsClearButton.setBackground(new java.awt.Color(72, 62, 33));
        SkillsClearButton.setFont(new java.awt.Font("Papyrus", 1, 14)); // NOI18N
        SkillsClearButton.setForeground(new java.awt.Color(255, 255, 255));
        SkillsClearButton.setText("Clear All");
        SkillsClearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SkillsClearButtonActionPerformed(evt);
            }
        });
        Skills.add(SkillsClearButton);
        SkillsClearButton.setBounds(515, 270, 100, 35);

        SkillsAddButton.setBackground(new java.awt.Color(72, 62, 33));
        SkillsAddButton.setFont(new java.awt.Font("Papyrus", 1, 14)); // NOI18N
        SkillsAddButton.setForeground(new java.awt.Color(255, 255, 255));
        SkillsAddButton.setText("Add");
        SkillsAddButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SkillsAddButtonActionPerformed(evt);
            }
        });
        Skills.add(SkillsAddButton);
        SkillsAddButton.setBounds(145, 270, 100, 35);

        SkillsNameField.setBackground(new java.awt.Color(195, 176, 103));
        SkillsNameField.setFont(new java.awt.Font("Papyrus", 1, 10)); // NOI18N
        SkillsNameField.setText("Enter Custom Skill Name");
        Skills.add(SkillsNameField);
        SkillsNameField.setBounds(140, 115, 240, 25);

        SkillsIDField.setBackground(new java.awt.Color(195, 176, 103));
        SkillsIDField.setFont(new java.awt.Font("Papyrus", 1, 10)); // NOI18N
        SkillsIDField.setText("Enter Custom Skill ID");
        Skills.add(SkillsIDField);
        SkillsIDField.setBounds(140, 80, 240, 25);

        SkillsValueField.setBackground(new java.awt.Color(195, 176, 103));
        SkillsValueField.setFont(new java.awt.Font("Papyrus", 1, 10)); // NOI18N
        SkillsValueField.setText("Enter Custom Skill Value");
        Skills.add(SkillsValueField);
        SkillsValueField.setBounds(140, 150, 240, 25);

        SkillsUpdateButton.setBackground(new java.awt.Color(72, 62, 33));
        SkillsUpdateButton.setFont(new java.awt.Font("Papyrus", 1, 14)); // NOI18N
        SkillsUpdateButton.setForeground(new java.awt.Color(255, 255, 255));
        SkillsUpdateButton.setText("Update");
        SkillsUpdateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SkillsUpdateButtonActionPerformed(evt);
            }
        });
        Skills.add(SkillsUpdateButton);
        SkillsUpdateButton.setBounds(390, 270, 100, 35);

        SkillsProgressBar.setBackground(new java.awt.Color(72, 62, 33));
        SkillsProgressBar.setForeground(new java.awt.Color(222, 205, 134));
        Skills.add(SkillsProgressBar);
        SkillsProgressBar.setBounds(25, 230, 590, 20);

        SkillsLogo.setBackground(new java.awt.Color(51, 51, 51));
        SkillsLogo.setForeground(new java.awt.Color(51, 51, 51));
        SkillsLogo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/TestingApplicationv1/Logo_Small.png"))); // NOI18N
        Skills.add(SkillsLogo);
        SkillsLogo.setBounds(20, 0, 70, 70);

        SkillsBackground.setBackground(new java.awt.Color(51, 51, 51));
        SkillsBackground.setForeground(new java.awt.Color(51, 51, 51));
        SkillsBackground.setIcon(new javax.swing.ImageIcon(getClass().getResource("/TestingApplicationv1/Background.png"))); // NOI18N
        Skills.add(SkillsBackground);
        SkillsBackground.setBounds(0, 0, 640, 340);

        MainTabbedPane.addTab("Skills", Skills);

        Ownership.setLayout(null);

        OwnershipPlayerIDLabel.setFont(new java.awt.Font("Papyrus", 1, 14)); // NOI18N
        OwnershipPlayerIDLabel.setText("Player ID");
        Ownership.add(OwnershipPlayerIDLabel);
        OwnershipPlayerIDLabel.setBounds(25, 80, 100, 25);

        OwnershipItemIDLabel.setFont(new java.awt.Font("Papyrus", 1, 14)); // NOI18N
        OwnershipItemIDLabel.setText("Item ID");
        Ownership.add(OwnershipItemIDLabel);
        OwnershipItemIDLabel.setBounds(25, 115, 100, 25);

        OwnershipIDLabel.setFont(new java.awt.Font("Papyrus", 1, 14)); // NOI18N
        OwnershipIDLabel.setText("Ownership ID");
        Ownership.add(OwnershipIDLabel);
        OwnershipIDLabel.setBounds(25, 150, 110, 25);

        OwnershipItemNameLabel.setText(".");
        Ownership.add(OwnershipItemNameLabel);
        OwnershipItemNameLabel.setBounds(205, 132, 71, 23);

        OwnershipRemoveButton.setBackground(new java.awt.Color(72, 62, 33));
        OwnershipRemoveButton.setFont(new java.awt.Font("Papyrus", 1, 14)); // NOI18N
        OwnershipRemoveButton.setForeground(new java.awt.Color(255, 255, 255));
        OwnershipRemoveButton.setText("Remove");
        OwnershipRemoveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OwnershipRemoveButtonActionPerformed(evt);
            }
        });
        Ownership.add(OwnershipRemoveButton);
        OwnershipRemoveButton.setBounds(265, 270, 100, 35);

        OwnershipSearchButton.setBackground(new java.awt.Color(72, 62, 33));
        OwnershipSearchButton.setFont(new java.awt.Font("Papyrus", 1, 14)); // NOI18N
        OwnershipSearchButton.setForeground(new java.awt.Color(255, 255, 255));
        OwnershipSearchButton.setText("Search");
        OwnershipSearchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OwnershipSearchButtonActionPerformed(evt);
            }
        });
        Ownership.add(OwnershipSearchButton);
        OwnershipSearchButton.setBounds(25, 270, 100, 35);

        OwnershipClearButton.setBackground(new java.awt.Color(72, 62, 33));
        OwnershipClearButton.setFont(new java.awt.Font("Papyrus", 1, 14)); // NOI18N
        OwnershipClearButton.setForeground(new java.awt.Color(255, 255, 255));
        OwnershipClearButton.setText("Clear All");
        OwnershipClearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OwnershipClearButtonActionPerformed(evt);
            }
        });
        Ownership.add(OwnershipClearButton);
        OwnershipClearButton.setBounds(515, 270, 100, 35);

        OwnershipAddButton.setBackground(new java.awt.Color(72, 62, 33));
        OwnershipAddButton.setFont(new java.awt.Font("Papyrus", 1, 14)); // NOI18N
        OwnershipAddButton.setForeground(new java.awt.Color(255, 255, 255));
        OwnershipAddButton.setText("Add");
        OwnershipAddButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OwnershipAddButtonActionPerformed(evt);
            }
        });
        Ownership.add(OwnershipAddButton);
        OwnershipAddButton.setBounds(145, 270, 100, 35);

        OwnershipPlayerIDField.setBackground(new java.awt.Color(195, 176, 103));
        OwnershipPlayerIDField.setFont(new java.awt.Font("Papyrus", 1, 10)); // NOI18N
        OwnershipPlayerIDField.setText("Enter Player ID");
        Ownership.add(OwnershipPlayerIDField);
        OwnershipPlayerIDField.setBounds(140, 80, 100, 25);

        OwnershipItemIDField.setBackground(new java.awt.Color(195, 176, 103));
        OwnershipItemIDField.setFont(new java.awt.Font("Papyrus", 1, 10)); // NOI18N
        OwnershipItemIDField.setText("Enter Item ID");
        Ownership.add(OwnershipItemIDField);
        OwnershipItemIDField.setBounds(140, 115, 100, 25);

        OwnershipUpdateButton.setBackground(new java.awt.Color(72, 62, 33));
        OwnershipUpdateButton.setFont(new java.awt.Font("Papyrus", 1, 14)); // NOI18N
        OwnershipUpdateButton.setForeground(new java.awt.Color(255, 255, 255));
        OwnershipUpdateButton.setText("Update");
        OwnershipUpdateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OwnershipUpdateButtonActionPerformed(evt);
            }
        });
        Ownership.add(OwnershipUpdateButton);
        OwnershipUpdateButton.setBounds(390, 270, 100, 35);

        OwnershipDisplayButton.setBackground(new java.awt.Color(72, 62, 33));
        OwnershipDisplayButton.setFont(new java.awt.Font("Papyrus", 1, 14)); // NOI18N
        OwnershipDisplayButton.setForeground(new java.awt.Color(255, 255, 255));
        OwnershipDisplayButton.setText("Display all for Player");
        OwnershipDisplayButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OwnershipDisplayButtonActionPerformed(evt);
            }
        });
        Ownership.add(OwnershipDisplayButton);
        OwnershipDisplayButton.setBounds(25, 190, 220, 35);

        OwnershipIDField.setBackground(new java.awt.Color(195, 176, 103));
        OwnershipIDField.setFont(new java.awt.Font("Papyrus", 1, 10)); // NOI18N
        OwnershipIDField.setText("Enter Index ID");
        Ownership.add(OwnershipIDField);
        OwnershipIDField.setBounds(140, 150, 100, 25);

        ManagerPasswordField_Ownership.setBackground(new java.awt.Color(195, 176, 103));
        ManagerPasswordField_Ownership.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        ManagerPasswordField_Ownership.setText("jPasswordField1");
        ManagerPasswordField_Ownership.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                ManagerPasswordField_OwnershipFocusLost(evt);
            }
        });
        Ownership.add(ManagerPasswordField_Ownership);
        ManagerPasswordField_Ownership.setBounds(100, 40, 140, 20);

        ManagerPasswordLabel_Ownership.setBackground(new java.awt.Color(255, 255, 255));
        ManagerPasswordLabel_Ownership.setFont(new java.awt.Font("Papyrus", 1, 14)); // NOI18N
        ManagerPasswordLabel_Ownership.setText("Manager Password");
        Ownership.add(ManagerPasswordLabel_Ownership);
        ManagerPasswordLabel_Ownership.setBounds(100, 10, 140, 30);

        OwnershipProgressBar.setBackground(new java.awt.Color(72, 62, 33));
        OwnershipProgressBar.setForeground(new java.awt.Color(222, 205, 134));
        Ownership.add(OwnershipProgressBar);
        OwnershipProgressBar.setBounds(25, 235, 220, 20);

        OwnershipItemList.setColumns(20);
        OwnershipItemList.setRows(5);
        OwnershipScrollPane.setViewportView(OwnershipItemList);

        Ownership.add(OwnershipScrollPane);
        OwnershipScrollPane.setBounds(275, 40, 340, 215);

        OwnershipLogo.setBackground(new java.awt.Color(51, 51, 51));
        OwnershipLogo.setForeground(new java.awt.Color(51, 51, 51));
        OwnershipLogo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/TestingApplicationv1/Logo_Small.png"))); // NOI18N
        Ownership.add(OwnershipLogo);
        OwnershipLogo.setBounds(20, 0, 70, 70);

        OwnershipBackground.setBackground(new java.awt.Color(51, 51, 51));
        OwnershipBackground.setForeground(new java.awt.Color(51, 51, 51));
        OwnershipBackground.setIcon(new javax.swing.ImageIcon(getClass().getResource("/TestingApplicationv1/Background.png"))); // NOI18N
        Ownership.add(OwnershipBackground);
        OwnershipBackground.setBounds(0, 0, 640, 340);

        MainTabbedPane.addTab("Ownership", Ownership);

        SkillsOwned.setLayout(null);

        PSPlayerIDLabel.setFont(new java.awt.Font("Papyrus", 1, 14)); // NOI18N
        PSPlayerIDLabel.setText("Player ID");
        SkillsOwned.add(PSPlayerIDLabel);
        PSPlayerIDLabel.setBounds(25, 80, 110, 25);

        PSSkillIDLabel.setFont(new java.awt.Font("Papyrus", 1, 14)); // NOI18N
        PSSkillIDLabel.setText("Skill ID");
        SkillsOwned.add(PSSkillIDLabel);
        PSSkillIDLabel.setBounds(25, 115, 110, 25);

        PSRemoveButton.setBackground(new java.awt.Color(72, 62, 33));
        PSRemoveButton.setFont(new java.awt.Font("Papyrus", 1, 14)); // NOI18N
        PSRemoveButton.setForeground(new java.awt.Color(255, 255, 255));
        PSRemoveButton.setText("Remove");
        PSRemoveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PSRemoveButtonActionPerformed(evt);
            }
        });
        SkillsOwned.add(PSRemoveButton);
        PSRemoveButton.setBounds(265, 270, 100, 35);

        PSSearchButton.setBackground(new java.awt.Color(72, 62, 33));
        PSSearchButton.setFont(new java.awt.Font("Papyrus", 1, 14)); // NOI18N
        PSSearchButton.setForeground(new java.awt.Color(255, 255, 255));
        PSSearchButton.setText("Search");
        PSSearchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PSSearchButtonActionPerformed(evt);
            }
        });
        SkillsOwned.add(PSSearchButton);
        PSSearchButton.setBounds(25, 270, 100, 35);

        PSClearButton.setBackground(new java.awt.Color(72, 62, 33));
        PSClearButton.setFont(new java.awt.Font("Papyrus", 1, 14)); // NOI18N
        PSClearButton.setForeground(new java.awt.Color(255, 255, 255));
        PSClearButton.setText("Clear All");
        PSClearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PSClearButtonActionPerformed(evt);
            }
        });
        SkillsOwned.add(PSClearButton);
        PSClearButton.setBounds(515, 270, 100, 35);

        PSAddButton.setBackground(new java.awt.Color(72, 62, 33));
        PSAddButton.setFont(new java.awt.Font("Papyrus", 1, 14)); // NOI18N
        PSAddButton.setForeground(new java.awt.Color(255, 255, 255));
        PSAddButton.setText("Add");
        PSAddButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PSAddButtonActionPerformed(evt);
            }
        });
        SkillsOwned.add(PSAddButton);
        PSAddButton.setBounds(145, 270, 100, 35);

        PSPlayerIDField.setBackground(new java.awt.Color(195, 176, 103));
        PSPlayerIDField.setFont(new java.awt.Font("Papyrus", 1, 10)); // NOI18N
        PSPlayerIDField.setText("Enter Player ID");
        SkillsOwned.add(PSPlayerIDField);
        PSPlayerIDField.setBounds(140, 80, 100, 25);

        PSSkillIDField.setBackground(new java.awt.Color(195, 176, 103));
        PSSkillIDField.setFont(new java.awt.Font("Papyrus", 1, 10)); // NOI18N
        PSSkillIDField.setText("Enter Skill ID");
        SkillsOwned.add(PSSkillIDField);
        PSSkillIDField.setBounds(140, 115, 100, 25);

        PSUpdateButton.setBackground(new java.awt.Color(72, 62, 33));
        PSUpdateButton.setFont(new java.awt.Font("Papyrus", 1, 14)); // NOI18N
        PSUpdateButton.setForeground(new java.awt.Color(255, 255, 255));
        PSUpdateButton.setText("Update");
        PSUpdateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PSUpdateButtonActionPerformed(evt);
            }
        });
        SkillsOwned.add(PSUpdateButton);
        PSUpdateButton.setBounds(390, 270, 100, 35);

        PSDisplayButton.setBackground(new java.awt.Color(72, 62, 33));
        PSDisplayButton.setFont(new java.awt.Font("Papyrus", 1, 14)); // NOI18N
        PSDisplayButton.setForeground(new java.awt.Color(255, 255, 255));
        PSDisplayButton.setText("Display all for Player");
        PSDisplayButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PSDisplayButtonActionPerformed(evt);
            }
        });
        SkillsOwned.add(PSDisplayButton);
        PSDisplayButton.setBounds(25, 190, 220, 35);

        PSIDField.setBackground(new java.awt.Color(195, 176, 103));
        PSIDField.setFont(new java.awt.Font("Papyrus", 1, 10)); // NOI18N
        PSIDField.setText("Enter  Index ID");
        SkillsOwned.add(PSIDField);
        PSIDField.setBounds(140, 150, 100, 25);

        PSIDLabel.setFont(new java.awt.Font("Papyrus", 1, 14)); // NOI18N
        PSIDLabel.setText("Ownership ID");
        SkillsOwned.add(PSIDLabel);
        PSIDLabel.setBounds(25, 150, 110, 25);

        PSProgressBar.setBackground(new java.awt.Color(72, 62, 33));
        PSProgressBar.setForeground(new java.awt.Color(222, 205, 134));
        SkillsOwned.add(PSProgressBar);
        PSProgressBar.setBounds(25, 235, 220, 20);

        ManagerPasswordLabel_SkillOwnership.setBackground(new java.awt.Color(255, 255, 255));
        ManagerPasswordLabel_SkillOwnership.setFont(new java.awt.Font("Papyrus", 1, 14)); // NOI18N
        ManagerPasswordLabel_SkillOwnership.setText("Manager Password");
        SkillsOwned.add(ManagerPasswordLabel_SkillOwnership);
        ManagerPasswordLabel_SkillOwnership.setBounds(100, 10, 140, 30);

        ManagerPasswordField_SkillOwnership.setBackground(new java.awt.Color(195, 176, 103));
        ManagerPasswordField_SkillOwnership.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        ManagerPasswordField_SkillOwnership.setText("jPasswordField1");
        ManagerPasswordField_SkillOwnership.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                ManagerPasswordField_SkillOwnershipFocusLost(evt);
            }
        });
        SkillsOwned.add(ManagerPasswordField_SkillOwnership);
        ManagerPasswordField_SkillOwnership.setBounds(100, 40, 140, 20);

        PSItemList.setColumns(20);
        PSItemList.setRows(5);
        PSScrollPane.setViewportView(PSItemList);

        SkillsOwned.add(PSScrollPane);
        PSScrollPane.setBounds(275, 40, 340, 215);

        PSLogo.setBackground(new java.awt.Color(51, 51, 51));
        PSLogo.setForeground(new java.awt.Color(51, 51, 51));
        PSLogo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/TestingApplicationv1/Logo_Small.png"))); // NOI18N
        SkillsOwned.add(PSLogo);
        PSLogo.setBounds(20, 0, 70, 70);

        PSBackground.setBackground(new java.awt.Color(51, 51, 51));
        PSBackground.setForeground(new java.awt.Color(51, 51, 51));
        PSBackground.setIcon(new javax.swing.ImageIcon(getClass().getResource("/TestingApplicationv1/Background.png"))); // NOI18N
        SkillsOwned.add(PSBackground);
        PSBackground.setBounds(0, 0, 640, 340);

        MainTabbedPane.addTab("Player Skills", SkillsOwned);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(MainTabbedPane, javax.swing.GroupLayout.PREFERRED_SIZE, 648, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(MainTabbedPane, javax.swing.GroupLayout.PREFERRED_SIZE, 366, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    
    private void ItemSearchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ItemSearchButtonActionPerformed
        //Start of search button
        ItemLoadBar0();
        //try and make a connection to the DB using the global URL variable
        //The connection and statements objects might be better if global?
        try (Connection conn = DriverManager.getConnection(url)){  
            String str = ItemIDField.getText();  
            //PreparedStatement – Used to execute parameterized SQL queries
            PreparedStatement st = conn.prepareStatement("select * from Items where ItemID=?");  
            st.setString(1, str); //pass id string to statement, why 1? multiple statements? location?
            //Excuting Query  
            ResultSet rs = st.executeQuery(); //get result set rs by executing the Prepared Statement
            if (rs.next()) { //iterate rs
                String s = rs.getString(1); //get id from rs, save as s 
                String s1 = rs.getString(2); //get name from rs, save as s1 
                String s2 = rs.getString(3); //get cost from rs, save as s2
                String s3 = rs.getString(4); //get weight from rs, save as s3
                String s4 = rs.getString(5); //get statname from rs, save as s4
                String s5 = rs.getString(6); //get statvalue from rs, save as s5
                //Sets Records in TextFields.  
                ItemIDField.setText(s); //set id in textbox  
                ItemNameField.setText(s1);  //set name in textbox 
                ItemCostField.setText(s2);  //set cost in textbox 
                ItemWeightField.setText(s3);  //set weight in textbox 
                ItemStatValueField.setText(s5);  //set statvalue in textbox
                
                //ItemImage.setIcon(new javax.swing.ImageIcon(getClass().getResource("c:/mydb/players/" + s + ".png")));
                
                switch (s4) {
                    case "Kinetic":
                      ItemStatDropdown.setSelectedIndex(0);
                      break;
                    case "Frost":
                      ItemStatDropdown.setSelectedIndex(1);
                      break;
                    case "Fire":
                      ItemStatDropdown.setSelectedIndex(2);
                      break;
                    case "Poison":
                      ItemStatDropdown.setSelectedIndex(3);
                      break;
                    default:
                      break;
                
                }
                ItemLoadBar100();
            } else {  
                ItemSearchTryName();
            } //end if else  
            //Create Exception Handler  
        } catch (Exception e) {  
            JOptionPane.showMessageDialog(null,(e.getMessage())); //error from try
        }//end try catch
        //end of search button
    }//GEN-LAST:event_ItemSearchButtonActionPerformed

    private void ItemSearchTryName() {
        //try and make a connection to the DB using the global URL variable
        //The connection and statements objects might be better if global?
        try (Connection conn = DriverManager.getConnection(url)){  
            String str = ItemNameField.getText();  
            //PreparedStatement – Used to execute parameterized SQL queries
            PreparedStatement st = conn.prepareStatement("select * from Items where ItemName=?");  
            st.setString(1, str); //pass id string to statement, why 1? multiple statements? location?
            //Excuting Query  
            ResultSet rs = st.executeQuery(); //get result set rs by executing the Prepared Statement
            if (rs.next()) { //iterate rs
                String s = rs.getString(1); //get id from rs, save as s 
                String s1 = rs.getString(2); //get name from rs, save as s1 
                String s2 = rs.getString(3); //get cost from rs, save as s2
                String s3 = rs.getString(4); //get weight from rs, save as s3
                String s4 = rs.getString(5); //get statname from rs, save as s4
                String s5 = rs.getString(6); //get statvalue from rs, save as s5
                //Sets Records in TextFields.  
                ItemIDField.setText(s); //set id in textbox  
                ItemNameField.setText(s1);  //set name in textbox 
                ItemCostField.setText(s2);  //set cost in textbox 
                ItemWeightField.setText(s3);  //set weight in textbox 
                ItemStatValueField.setText(s5);  //set statvalue in textbox 
                
                
                ItemImage.setIcon(new ImageIcon("1.png"));//incomplete code due to losing provided example
                switch (s4) {
                    case "Kinetic":
                      ItemStatDropdown.setSelectedIndex(0);
                      break;
                    case "Frost":
                      ItemStatDropdown.setSelectedIndex(1);
                      break;
                    case "Fire":
                      ItemStatDropdown.setSelectedIndex(2);
                      break;
                    case "Poison":
                      ItemStatDropdown.setSelectedIndex(3);
                      break;
                    default:
                      break;
                
                }
                ItemLoadBar100();
            } else {  
                JOptionPane.showMessageDialog(null, "ERROR: Item Not Found"); //error getting rs
            } //end if else  
            //Create Exception Handler  
        } catch (Exception e) {  
            JOptionPane.showMessageDialog(null,(e.getMessage())); //error from try
        }//end try catch
        //end of search button
    }
    
    private void ItemRemoveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ItemRemoveButtonActionPerformed
       //Start of delete button
       ItemLoadBar0();
       boolean Valid = ItemValidator();
       if (Valid==true) {
            //only needs ID to delete item
            //try and make a connection to the DB using the gloabal URL variable
            //The connection and statements objects might be better if global?
            try (Connection conn = DriverManager.getConnection(url)){ 
                //Statement – Used to execute string-based SQL queries
                Statement statement = conn.createStatement();
                //maybe statement.execute? executeUpdate also works
                statement.executeUpdate("DELETE FROM Items WHERE ItemID='" + ItemIDField.getText() + "';");  
                JOptionPane.showMessageDialog(null, "Record deleted..."); //let user know
                statement.close(); // close statement, may not be needed, probably a good thing to do 
                conn.close(); //close statement, may not be needed, probably a good thing to do
                ItemLoadBar100();
            } catch (Exception e) {  
                JOptionPane.showMessageDialog(null,(e.getMessage())); //show real error message, good for testing, not user friendly 
            } //end try catch
            //end of delete button
       }
    }//GEN-LAST:event_ItemRemoveButtonActionPerformed

    private void ItemAddButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ItemAddButtonActionPerformed
       //Start of insert button
       ItemLoadBar0();
       boolean Valid = ItemValidator();
       if (Valid==true) {
            //validate all values
            //try and make a connection to the DB using the global URL variable
            //The connection and statements objects might be better if global?
            try (Connection conn = DriverManager.getConnection(url)){  
                //Statement – Used to execute string-based SQL queries
                Statement statement = conn.createStatement();
                //maybe statement.execute? executeUpdate also works
                statement.executeUpdate("INSERT INTO Items VALUES('" + ItemIDField.getText() + "','" + ItemNameField.getText() + "','" + ItemCostField.getText() + "','" + ItemWeightField.getText() + "','" + ItemStatDropdown.getSelectedItem().toString() + "','" + ItemStatValueField.getText() + "')");
                JOptionPane.showMessageDialog(null, "Record inserted..."); //let user know 
                statement.close(); // close statement, may not be needed, probably a good thing to do
                conn.close(); //close statement, may not be needed, probably a good thing to do
                ItemLoadBar100();
            } catch (Exception e) {  
                JOptionPane.showMessageDialog(null,(e.getMessage())); //show message, good for testing, not user friendly 
            } //end try catch
            //end of insert button
       }
    }//GEN-LAST:event_ItemAddButtonActionPerformed

    private void ItemUpdateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ItemUpdateButtonActionPerformed
       //Start of update button
       ItemLoadBar0();
       boolean Valid = ItemValidator();
       if (Valid==true) {
            //update will not change ID, db constraint? maybe because UPDATE statement?
            //try and make a connection to the DB using the gloabal URL variable
            //The connection and statements objects might be better if global?
            try (Connection conn = DriverManager.getConnection(url)){ 
                //Statement – Used to execute string-based SQL queries
                Statement statement = conn.createStatement();
                //maybe statement.executeUpdate? execute also works
               statement.execute("UPDATE Items SET ItemName='" + ItemNameField.getText() + "',ItemCost='" + ItemCostField.getText() + "',ItemWeight='" + ItemWeightField.getText() + "',ItemStatName='" + ItemStatDropdown.getSelectedItem().toString() + "',ItemStatValue='" + ItemStatValueField.getText() + "' WHERE ItemID='" + ItemIDField.getText() + "';");
                JOptionPane.showMessageDialog(null, "Record updated..."); //let user know
                statement.close(); // close statement, may not be needed, probably a good thing to do 
                conn.close(); //close statement, may not be needed, probably a good thing to do
                ItemLoadBar100();
            } catch (Exception e) {  
                JOptionPane.showMessageDialog(null,(e.getMessage())); //show real error message, good for testing, not user friendly 
            } //end try catch
            //end of update button
       }
    }//GEN-LAST:event_ItemUpdateButtonActionPerformed

    private void ItemClearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ItemClearButtonActionPerformed
                ItemIDField.setText("Enter Item ID"); //set id in textbox  
                ItemNameField.setText("Enter Item Name");  //set name in textbox 
                ItemCostField.setText("Enter Cost");  //set cost in textbox 
                ItemWeightField.setText("Enter Weight");  //set weight in textbox 
                ItemStatDropdown.setSelectedIndex(1);  //set statname in textbox 
                ItemStatValueField.setText("Enter Stat Value");  //set statvalue in textbox 
                ManagerPasswordField_Items.setText("******");  //set statname in textbox 
               // ItemImage.setIcon(new javax.swing.ImageIcon(getClass().getResource("c:/mydb/players/0.png")));
                ItemLoadBar0();
    }//GEN-LAST:event_ItemClearButtonActionPerformed
    
    private boolean ItemValidator() {
        if (ItemStatValueField.getText().length() < 4) {//check for data length
            if (ItemStatValueField.getText().matches("\\d+")){ } else { //check for numeracy
                JOptionPane.showMessageDialog(null, "Custom Stat Value entered is not numerical"); //let user know 
                return false;
            }
        } else {
            JOptionPane.showMessageDialog(null, "Custom Stat Value entered is too high\nMaximum: 999"); //let user know 
            return false;
        }
        if (ItemCostField.getText().length() < 7) {//check for data length
            if (ItemCostField.getText().matches("\\d+")){ } else { //check for numeracy
                JOptionPane.showMessageDialog(null, "Item cost entered is not numerical"); //let user know 
                return false;
            }
        } else {
            JOptionPane.showMessageDialog(null, "Item cost entered is too high\nMaximum: 999'999"); //let user know 
            return false;
        }
        if (ItemWeightField.getText().length() < 6) {//check for data length
        } else {
            JOptionPane.showMessageDialog(null, "Item Weight entered contains too many characters\nMaximum: 6"); //let user know 
            return false;
        }
        if (ItemNameField.getText().length() < 256) {//check for data length
        } else {
            JOptionPane.showMessageDialog(null, "ID entered contains too many characters\nMaximum: 255"); //let user know 
            return false;
        }
        if (ItemIDField.getText().length() < 4) {//check for data length
            if (ItemIDField.getText().matches("\\d+")){ } else { //check for numeracy
                JOptionPane.showMessageDialog(null, "ID entered is not numerical"); //let user know 
                return false;
            }
        } else {
            JOptionPane.showMessageDialog(null, "ID entered is too high\nMaximum: 999"); //let user know 
            return false;
        }
        String pwd = String.valueOf(ManagerPasswordField_Items.getPassword());
        return PasswordCheck(pwd);
    }
    
    private void ManagerPasswordField_ItemsFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_ManagerPasswordField_ItemsFocusLost
        JOptionPane.showMessageDialog(null, "Password Entered"); //let user know 
    }//GEN-LAST:event_ManagerPasswordField_ItemsFocusLost

    //START OF PLAYER METHODS
    
    private void PlayerRemoveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PlayerRemoveButtonActionPerformed
       //Start of delete button
       PlayerLoadBar0();
       boolean Valid = PlayerValidator();
       if (Valid==true) {
        //try and make a connection to the DB using the gloabal URL variable
        //The connection and statements objects might be better if global?
        try (Connection conn = DriverManager.getConnection(url)){ 
            //Statement – Used to execute string-based SQL queries
            Statement statement = conn.createStatement();
            //maybe statement.execute? executeUpdate also works
            statement.executeUpdate("DELETE FROM Items WHERE PlayerID='" + PlayerIDField.getText() + "';");  
            JOptionPane.showMessageDialog(null, "Record deleted..."); //let user know
            statement.close(); // close statement, may not be needed, probably a good thing to do 
            conn.close(); //close statement, may not be needed, probably a good thing to do
            PlayerLoadBar100();
        } catch (Exception e) {  
            JOptionPane.showMessageDialog(null,(e.getMessage())); //show real error message, good for testing, not user friendly 
        } //end try catch
       }
        //end of delete button
    }//GEN-LAST:event_PlayerRemoveButtonActionPerformed

    private void PlayerSearchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PlayerSearchButtonActionPerformed
        //Start of search button
        PlayerLoadBar0();
        //try and make a connection to the DB using the global URL variable
        //The connection and statements objects might be better if global?
        try (Connection conn = DriverManager.getConnection(url)){  
            String str = PlayerIDField.getText();  
            //PreparedStatement – Used to execute parameterized SQL queries
            PreparedStatement st = conn.prepareStatement("select * from Players where PlayerID=?");  
            st.setString(1, str); //pass id string to statement, why 1? multiple statements? location?
            //Excuting Query  
            ResultSet rs = st.executeQuery(); //get result set rs by executing the Prepared Statement
            if (rs.next()) { //iterate rs
                String s = rs.getString(1); //get id from rs, save as s 
                String s1 = rs.getString(2); //get name from rs, save as s1 
                String s2 = rs.getString(3); //get cost from rs, save as s2
                String s3 = rs.getString(4); //get weight from rs, save as s3
                //Sets Records in TextFields.  
                PlayerIDField.setText(s); //set id in textbox  
                PlayerNameField.setText(s1);  //set name in textbox 
                PlayerHealthField.setText(s2);  //set cost in textbox 
                PlayerLevelSlider.setValue(Integer.parseInt(s3));  //set weight in textbox 
                //PlayerImage.setIcon(new javax.swing.ImageIcon(getClass().getResource("c:/mydb/players/" + s + ".png")));
                PlayerLoadBar100();
            } else {  
                PlayerSearchTryName();
            } //end if else  
            //Create Exception Handler  
        } catch (Exception e) {  
            JOptionPane.showMessageDialog(null,(e.getMessage())); //error from try
        }//end try catch
        //end of search button
    }//GEN-LAST:event_PlayerSearchButtonActionPerformed

    private void PlayerSearchTryName() {
        //try and make a connection to the DB using the global URL variable
        //The connection and statements objects might be better if global?
        try (Connection conn = DriverManager.getConnection(url)){  
            String str = PlayerNameField.getText();  
            //PreparedStatement – Used to execute parameterized SQL queries
            PreparedStatement st = conn.prepareStatement("select * from Players where PlayerName=?");  
            st.setString(1, str); //pass id string to statement, why 1? multiple statements? location?
            //Excuting Query  
            ResultSet rs = st.executeQuery(); //get result set rs by executing the Prepared Statement
            if (rs.next()) { //iterate rs
              String s = rs.getString(1); //get id from rs, save as s 
                String s1 = rs.getString(2); //get name from rs, save as s1 
                String s2 = rs.getString(3); //get cost from rs, save as s2
                String s3 = rs.getString(4); //get weight from rs, save as s3
                //Sets Records in TextFields.  
                PlayerIDField.setText(s); //set id in textbox  
                PlayerNameField.setText(s1);  //set name in textbox 
                PlayerHealthField.setText(s2);  //set cost in textbox 
                PlayerLevelSlider.setValue(Integer.parseInt(s3));  //set weight in textbox 
                PlayerLoadBar100();
            } else {  
                JOptionPane.showMessageDialog(null, "ERROR: Player Not Found"); //error getting rs
            } //end if else  
            
            //Create Exception Handler  
        } catch (Exception e) {  
            JOptionPane.showMessageDialog(null,(e.getMessage())); //error from try
        }//end try catch
        //end of search button
    }
    
    private void PlayerClearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PlayerClearButtonActionPerformed
                PlayerIDField.setText("Enter Player ID"); //set id in textbox  
                PlayerNameField.setText("Enter Player Name");  //set name in textbox 
                PlayerHealthField.setText("Enter Player Health");  //set health in textbox 
                PlayerLevelSlider.setValue(50);  //set level in slider
                ManagerPasswordField_Players.setText("******");  //set password in textbox 
                PlayerLoadBar0();//reset loadbar
    }//GEN-LAST:event_PlayerClearButtonActionPerformed

    private void PlayerAddButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PlayerAddButtonActionPerformed
       //Start of insert button
        PlayerLoadBar0();
        boolean Valid = PlayerValidator();
        if (Valid==true) {
            //try and make a connection to the DB using the global URL variable
            //The connection and statements objects might be better if global?
            try (Connection conn = DriverManager.getConnection(url)){  
                //Statement – Used to execute string-based SQL queries
                Statement statement = conn.createStatement();
                //maybe statement.execute? executeUpdate also works
                statement.executeUpdate("INSERT INTO Players VALUES('" + PlayerIDField.getText() + "','" + PlayerNameField.getText() + "','" + PlayerHealthField.getText() + "','" + PlayerLevelSlider.getValue() + "','00')");
                JOptionPane.showMessageDialog(null, "Record inserted..."); //let user know 
                statement.close(); // close statement, may not be needed, probably a good thing to do
                conn.close(); //close statement, may not be needed, probably a good thing to do
                PlayerLoadBar100();
            } catch (Exception e) {  
                JOptionPane.showMessageDialog(null,(e.getMessage())); //show message, good for testing, not user friendly 
            } //end try catch
            //end of insert button
        }
    }//GEN-LAST:event_PlayerAddButtonActionPerformed
    
    private boolean PlayerValidator() {
        if (PlayerIDField.getText().length() < 4) {//check for data length
            if (PlayerIDField.getText().matches("\\d+")){ } else { //check for numeracy
                JOptionPane.showMessageDialog(null, "ID entered is not numerical"); //let user know 
                return false;
            }
        } else {
            JOptionPane.showMessageDialog(null, "ID entered is too high\nMaximum: 999"); //let user know 
            return false;
        }
        if (PlayerNameField.getText().length() < 256) {//check for data length
        } else {
            JOptionPane.showMessageDialog(null, "Player Name Contains too many characters\nMaximum: 255"); //let user know 
            return false;
        }
        if (PlayerHealthField.getText().length() < 5) {//check for data length
            if (PlayerHealthField.getText().matches("\\d+")){ } else { //check for numeracy
                JOptionPane.showMessageDialog(null, "Health entered is not numerical\nThis is not mandatory but suggested"); //let user know 
            }
        } else {
            JOptionPane.showMessageDialog(null, "Health entered is too high\nMaximum: 9999"); //let user know 
            return false;
        }
        String pwd = String.valueOf(ManagerPasswordField_Players.getPassword());
        return PasswordCheck(pwd);
    }
    
    
    private void PlayerUpdateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PlayerUpdateButtonActionPerformed
        //Start of update button
        PlayerLoadBar0();
        boolean Valid = PlayerValidator();
        if (Valid==true) {
            //update will not change ID, db constraint? maybe because UPDATE statement?
            //try and make a connection to the DB using the gloabal URL variable
            //The connection and statements objects might be better if global?
            try (Connection conn = DriverManager.getConnection(url)){ 
                //Statement – Used to execute string-based SQL queries
                Statement statement = conn.createStatement();
                //maybe statement.executeUpdate? execute also works
                statement.execute("UPDATE Players SET PlayerName='" + PlayerNameField.getText() + "',PlayerHealth='" + PlayerHealthField.getText() + "',PlayerLevel='" + PlayerLevelSlider.getValue() + "' \nWHERE PlayerID=" + PlayerIDField.getText() + ";");
                JOptionPane.showMessageDialog(null, "Record updated..."); //let user know
                statement.close(); // close statement, may not be needed, probably a good thing to do 
                conn.close(); //close statement, may not be needed, probably a good thing to do
                //Statement – Used to execute string-based SQL queries
                PlayerLoadBar100();
            } catch (Exception e) {  
                JOptionPane.showMessageDialog(null,(e.getMessage())); //show real error message, good for testing, not user friendly 
            } //end try catch
            //end of update button
        } else { //version solely updating name due to lack of password
            //update will not change ID, db constraint? maybe because UPDATE statement?
            //try and make a connection to the DB using the gloabal URL variable
            //The connection and statements objects might be better if global?
            try (Connection conn = DriverManager.getConnection(url)){ 
                //Statement – Used to execute string-based SQL queries
                Statement statement = conn.createStatement();
                //maybe statement.executeUpdate? execute also works
                statement.execute("UPDATE Players SET PlayerName='" + PlayerNameField.getText() + "' \nWHERE PlayerID=" + PlayerIDField.getText() + ";");
                JOptionPane.showMessageDialog(null, "Name updated..."); //let user know
                statement.close(); // close statement, may not be needed, probably a good thing to do 
                conn.close(); //close statement, may not be needed, probably a good thing to do
                //Statement – Used to execute string-based SQL queries
                PlayerLoadBar100();
            } catch (Exception e) {  
                JOptionPane.showMessageDialog(null,(e.getMessage())); //show real error message, good for testing, not user friendly 
            } //end try catch
            //end of update button
        }
        
    }//GEN-LAST:event_PlayerUpdateButtonActionPerformed

    //START OF SKILLS METHODS
    
    private void SkillsRemoveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SkillsRemoveButtonActionPerformed
        //Start of delete button
        SkillsLoadBar0();
        boolean Valid = SkillsValidator();
            if (Valid==true) {
            //only needs ID to delete item
            //try and make a connection to the DB using the gloabal URL variable
            //The connection and statements objects might be better if global?
            try (Connection conn = DriverManager.getConnection(url)){ 
                //Statement – Used to execute string-based SQL queries
                Statement statement = conn.createStatement();
                //maybe statement.execute? executeUpdate also works
                statement.executeUpdate("DELETE FROM Skills WHERE SkillID=" + SkillsIDField.getText() + "");  
                JOptionPane.showMessageDialog(null, "Record deleted..."); //let user know
                statement.close(); // close statement, may not be needed, probably a good thing to do 
                conn.close(); //close statement, may not be needed, probably a good thing to do
                SkillsLoadBar100();
            } catch (Exception e) {  
                JOptionPane.showMessageDialog(null,(e.getMessage())); //show real error message, good for testing, not user friendly 
            } //end try catch
        }
        //end of delete button
    }//GEN-LAST:event_SkillsRemoveButtonActionPerformed

    private void SkillSearchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SkillSearchButtonActionPerformed
        //Start of search button
        SkillsLoadBar0();
        //try and make a connection to the DB using the global URL variable
        //The connection and statements objects might be better if global?
        try (Connection conn = DriverManager.getConnection(url)){  
            String str = SkillsIDField.getText();  
            //PreparedStatement – Used to execute parameterized SQL queries
            PreparedStatement st = conn.prepareStatement("select * from Skills where SkillID=?");  
            st.setString(1, str); //pass id string to statement, why 1? multiple statements? location?
            //Excuting Query  
            ResultSet rs = st.executeQuery(); //get result set rs by executing the Prepared Statement
            if (rs.next()) { //iterate rs
                String s = rs.getString(1); //get id from rs, save as s 
                String s1 = rs.getString(2); //get name from rs, save as s1 
                String s2 = rs.getString(3); //get cost from rs, save as s2
                //Sets Records in TextFields.  
                SkillsIDField.setText(s); //set id in textbox  
                SkillsNameField.setText(s1);  //set name in textbox 
                SkillsValueField.setText(s2);  //set cost in textbox 
            } else {  
                JOptionPane.showMessageDialog(null, "ERROR: Skill not found"); //error getting rs
            } //end if else  
            //Create Exception Handler 
            SkillsLoadBar100();
        } catch (Exception e) {  
            JOptionPane.showMessageDialog(null,(e.getMessage())); //error from try
        }//end try catch
        //end of search button

    }//GEN-LAST:event_SkillSearchButtonActionPerformed

    private void SkillsClearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SkillsClearButtonActionPerformed
                SkillsNameField.setText("Enter Custom Skill Name"); //set id in textbox
                SkillsIDField.setText("Enter Custom Skill ID");  //set cost in textbox 
                SkillsValueField.setText("Enter Custom Skill Value");  //set statname in textbox 
                SkillsLoadBar0();
    }//GEN-LAST:event_SkillsClearButtonActionPerformed

    private void SkillsAddButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SkillsAddButtonActionPerformed
        //Start of insert button
        SkillsLoadBar0();
        boolean Valid = SkillsValidator();
        if (Valid==true) {
            //try and make a connection to the DB using the global URL variable
            //The connection and statements objects might be better if global?
            try (Connection conn = DriverManager.getConnection(url)){  
                //Statement – Used to execute string-based SQL queries
                Statement statement = conn.createStatement();
                //maybe statement.execute? executeUpdate also works
                statement.executeUpdate("INSERT INTO Skills VALUES('" + SkillsIDField.getText() + "','" + SkillsNameField.getText() + "','" + SkillsValueField.getText() + "')");
                JOptionPane.showMessageDialog(null, "Record inserted..."); //let user know 
                statement.close(); // close statement, may not be needed, probably a good thing to do
                conn.close(); //close statement, may not be needed, probably a good thing to do
            } catch (Exception e) {  
                JOptionPane.showMessageDialog(null,(e.getMessage())); //show message, good for testing, not user friendly 
            } //end try catch
            SkillsLoadBar100();
        }
        //end of insert button
    }//GEN-LAST:event_SkillsAddButtonActionPerformed

    private void SkillsUpdateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SkillsUpdateButtonActionPerformed
        //Start of update button
        SkillsLoadBar0();
        boolean Valid = SkillsValidator();
        if (Valid==true) {
            //try and make a connection to the DB using the gloabal URL variable
            //The connection and statements objects might be better if global?
            try (Connection conn = DriverManager.getConnection(url)){ 
                //Statement – Used to execute string-based SQL queries
                Statement statement = conn.createStatement();
                //maybe statement.executeUpdate? execute also works
                statement.execute("UPDATE Skills SET SkillName='" + SkillsNameField.getText() + "',SkillPointValue='" + SkillsValueField.getText() + "' WHERE SkillID=" + SkillsIDField.getText() + " ");
                JOptionPane.showMessageDialog(null, "Record updated..."); //let user know
                statement.close(); // close statement, may not be needed, probably a good thing to do 
                conn.close(); //close statement, may not be needed, probably a good thing to do
            } catch (Exception e) {  
                JOptionPane.showMessageDialog(null,(e.getMessage())); //show real error message, good for testing, not user friendly 
            } //end try catch
            SkillsLoadBar100();
        }
        //end of update button
    }//GEN-LAST:event_SkillsUpdateButtonActionPerformed

    private boolean SkillsValidator() {
        if (SkillsNameField.getText().length() < 256) {//check for data length
        } else {
            JOptionPane.showMessageDialog(null, "Skill name contains too many characters\nMaximum: 255"); //let user know 
            return false;
        }
        if (SkillsValueField.getText().length() < 3) {//check for data length
            if (SkillsValueField.getText().matches("\\d+")){ } else { //check for numeracy
                JOptionPane.showMessageDialog(null, "Skill Value entered is not numerical"); //let user know
                return false;
            }
        } else {
            JOptionPane.showMessageDialog(null, "Skill Value entered is too high\nMaximum: 99"); //let user know 
            return false;
        }
        if ((SkillsIDField.getText().length()) < 4) {//check for data length
            if (SkillsIDField.getText().matches("\\d+")){ } else { //check for numeracy
                JOptionPane.showMessageDialog(null, "Skill ID entered is not numerical"); //let user know 
                return false;
            }
        } else {
            JOptionPane.showMessageDialog(null, "Skill ID entered is too high\nMaximum: 999"); //let user know 
            return false;
        }
        return true;
    }
    
    //START OF OWNERSHIP
    
    private void OwnershipUpdateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OwnershipUpdateButtonActionPerformed
        OwnershipLoadBar0();
        boolean Valid = OwnershipValidator();
        if (Valid==true) {
            //try and make a connection to the DB using the gloabal URL variable
            //The connection and statements objects might be better if global?
            try (Connection conn = DriverManager.getConnection(url)){ 
                //Statement – Used to execute string-based SQL queries
                Statement statement = conn.createStatement();
                //maybe statement.executeUpdate? execute also works
                statement.execute("UPDATE Ownership SET ItemID='" + OwnershipItemIDField.getText() + "',PlayerID='" + OwnershipPlayerIDField.getText() + "' WHERE OwnershipID=" + OwnershipIDField.getText() + " ");
                JOptionPane.showMessageDialog(null, "Record updated..."); //let user know
                statement.close(); // close statement, may not be needed, probably a good thing to do 
                conn.close(); //close statement, may not be needed, probably a good thing to do
            } catch (Exception e) {  
                JOptionPane.showMessageDialog(null,(e.getMessage())); //show real error message, good for testing, not user friendly 
            } //end try catch
            OwnershipLoadBar100();
        }
        //end of update method
    }//GEN-LAST:event_OwnershipUpdateButtonActionPerformed

    private void OwnershipAddButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OwnershipAddButtonActionPerformed
        //Start of insert button
        OwnershipLoadBar0();
        boolean Valid = OwnershipValidator();
            if (Valid==true) {
            //try and make a connection to the DB using the global URL variable
            //The connection and statements objects might be better if global?
            try (Connection conn = DriverManager.getConnection(url)){  
                //Statement – Used to execute string-based SQL queries
                Statement statement = conn.createStatement();
                //maybe statement.execute? executeUpdate also works
                statement.executeUpdate("INSERT INTO Ownership VALUES('" + OwnershipIDField.getText() + "', '" + OwnershipItemIDField.getText() + "', '" + OwnershipPlayerIDField.getText() + "')");
                JOptionPane.showMessageDialog(null, "Record inserted..."); //let user know 
                statement.close(); // close statement, may not be needed, probably a good thing to do
                conn.close(); //close statement, may not be needed, probably a good thing to do
            } catch (Exception e) {  
                JOptionPane.showMessageDialog(null,(e.getMessage())); //show message, good for testing, not user friendly 
            } //end try catch
            OwnershipLoadBar100();
        }
        //end of insert button
    }//GEN-LAST:event_OwnershipAddButtonActionPerformed

    private void OwnershipClearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OwnershipClearButtonActionPerformed
                OwnershipItemIDField.setText("Enter Item ID"); //set id in textbox  
                OwnershipPlayerIDField.setText("Enter Player ID");  //set cost in textbox 
                OwnershipItemList.setText(" ");  //set weight in textbox 
                ManagerPasswordField_Ownership.setText("******");  //set statname in textbox 
                OwnershipLoadBar100();
    }//GEN-LAST:event_OwnershipClearButtonActionPerformed

    private void OwnershipSearchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OwnershipSearchButtonActionPerformed
        //Start of search button
        OwnershipLoadBar0();
        //try and make a connection to the DB using the global URL variable
        //The connection and statements objects might be better if global?
        try (Connection conn = DriverManager.getConnection(url)){  
            String str = OwnershipPlayerIDField.getText();
            String str2 = OwnershipItemIDField.getText();  
            //PreparedStatement – Used to execute parameterized SQL queries
            PreparedStatement st = conn.prepareStatement("select * from Ownership WHERE ItemID=? AND PlayerID=?");  
            st.setString(1, str2); //pass id string to statement, why 1? multiple statements? location?
            st.setString(2, str); //pass id string to statement, why 1? multiple statements? location?
            //Excuting Query  
            ResultSet rs = st.executeQuery(); //get result set rs by executing the Prepared Statement
            if (rs.next()) { //iterate rs
                String s = rs.getString(1); //get name from rs, save as s
                //Sets Records in TextFields.  
                OwnershipIDField.setText(s);  //set id in textbox 
                OwnershipLoadBar100();
            } else {  
                JOptionPane.showMessageDialog(null, "ERROR: No object found matching Player"); //error getting rs
            } //end if else  
            //Create Exception Handler  
        } catch (Exception e) {  
            JOptionPane.showMessageDialog(null,(e.getMessage())); //error from try
            JOptionPane.showMessageDialog(null,("Unresolved Coding Error")); //error from try
        }//end try catch
        //end of search button

    }//GEN-LAST:event_OwnershipSearchButtonActionPerformed

    private void OwnershipRemoveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OwnershipRemoveButtonActionPerformed
        //Start of delete button
        OwnershipLoadBar0();
        boolean Valid = OwnershipValidator();
            if (Valid==true) {
            //only needs ID to delete item
            //try and make a connection to the DB using the gloabal URL variable
            //The connection and statements objects might be better if global?
            try (Connection conn = DriverManager.getConnection(url)){ 
                //Statement – Used to execute string-based SQL queries
                Statement statement = conn.createStatement();
                //maybe statement.execute? executeUpdate also works
                statement.executeUpdate("DELETE FROM Ownership WHERE OwnershipID=" + OwnershipIDField.getText() + " ");  
                JOptionPane.showMessageDialog(null, "Ownership Record deleted..."); //let user know
                statement.close(); // close statement, may not be needed, probably a good thing to do 
                conn.close(); //close statement, may not be needed, probably a good thing to do
                OwnershipLoadBar100();
            } catch (Exception e) {  
                JOptionPane.showMessageDialog(null,(e.getMessage())); //show real error message, good for testing, not user friendly 
            } //end try catch
        }
        //end of delete button
    }//GEN-LAST:event_OwnershipRemoveButtonActionPerformed

    private boolean OwnershipValidator() {
        if (OwnershipPlayerIDField.getText().length() < 4) {//check for data length
            if (OwnershipPlayerIDField.getText().matches("\\d+")){ } else { //check for numeracy
                JOptionPane.showMessageDialog(null, "Player ID entered is not numerical"); //let user know 
            }
        } else {
            JOptionPane.showMessageDialog(null, "Player ID value is too high\nMaximum: 999"); //let user know 
            return false;
        }
        if (OwnershipItemIDField.getText().length() < 4) {//check for data length
            if (OwnershipItemIDField.getText().matches("\\d+")){ } else { //check for numeracy
                JOptionPane.showMessageDialog(null, "Item ID entered is not numerical"); //let user know 
            }
        } else {
            JOptionPane.showMessageDialog(null, "Item ID value is too high\nMaximum: 999"); //let user know 
            return false;
        }
        if ((OwnershipIDField.getText().length()) < 3) {//check for data length
            if (OwnershipIDField.getText().matches("\\d+")){ } else { //check for numeracy
                JOptionPane.showMessageDialog(null, "Ownership ID entered is not numerical"); //let user know 
            }
        } else {
            JOptionPane.showMessageDialog(null, "Ownership ID entered is too high\nMaximum: 99"); //let user know 
            return false;
        }
        String pwd = String.valueOf(ManagerPasswordField_Ownership.getPassword());
        return PasswordCheck(pwd);
    }
    
    //START OF PLAYER SKILLS
    
    private void PSRemoveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PSRemoveButtonActionPerformed
       //Start of delete button
        PSLoadBar0();
        boolean Valid = PlayerSkillsValidator();
        if (Valid==true) {
            //only needs ID to delete item
            //try and make a connection to the DB using the gloabal URL variable
            //The connection and statements objects might be better if global?
            try (Connection conn = DriverManager.getConnection(url)){ 
                //Statement – Used to execute string-based SQL queries
                Statement statement = conn.createStatement();
                //maybe statement.execute? executeUpdate also works
                statement.executeUpdate("DELETE FROM Ownership WHERE OwnershipID=" + OwnershipIDField.getText() + " ");  
                JOptionPane.showMessageDialog(null, "Ownership Record deleted..."); //let user know
                statement.close(); // close statement, may not be needed, probably a good thing to do 
                conn.close(); //close statement, may not be needed, probably a good thing to do
                PSLoadBar100();
            } catch (Exception e) {  
                JOptionPane.showMessageDialog(null,(e.getMessage())); //show real error message, good for testing, not user friendly 
            } //end try catch
        }
        //end of delete button
    }//GEN-LAST:event_PSRemoveButtonActionPerformed

    private void PSSearchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PSSearchButtonActionPerformed
        //Start of search button
        PSLoadBar0();
        //try and make a connection to the DB using the global URL variable
        //The connection and statements objects might be better if global?
        try (Connection conn = DriverManager.getConnection(url)){  
            String str = PSPlayerIDField.getText();
            String str2 = PSSkillIDField.getText();  
            //PreparedStatement – Used to execute parameterized SQL queries
            PreparedStatement st = conn.prepareStatement("select * from PlayerSkills WHERE SkillID=? AND PlayerID=?");  
            st.setString(1, str2); //pass id string to statement, why 1? multiple statements? location?
            st.setString(2, str); //pass id string to statement, why 1? multiple statements? location?
            //the 1 is a position referencing the question mark
            //executing query
            ResultSet rs = st.executeQuery(); //get result set rs by executing the Prepared Statement
            if (rs.next()) { //iterate rs
                String s = rs.getString(1); //get name from rs, save as s 
                String s1 = rs.getString(2); //get name from rs, save as s1 
                String s2 = rs.getString(3); //get cost from rs, save as s2
                //Sets Records in TextFields.
                PSIDField.setText(s); //setid in textbox
                PSSkillIDField.setText(s1);  //set name in textbox 
                PSPlayerIDField.setText(s2);  //set cost in textbox  
                PSLoadBar100();
            } else {  
                JOptionPane.showMessageDialog(null, "ERROR"); //error getting rs
            } //end if else  
            //Create Exception Handler  
        } catch (Exception e) {  
            JOptionPane.showMessageDialog(null,(e.getMessage())); //error from try
        }//end try catch
        //end of search button

    }//GEN-LAST:event_PSSearchButtonActionPerformed

    private void PSClearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PSClearButtonActionPerformed
                PSSkillIDField.setText("Enter Skill ID"); //set id in textbox  
                PSPlayerIDField.setText("Enter Player ID");  //set cost in textbox 
                OwnershipItemList.setText(" ");  //set weight in textbox 
                ManagerPasswordField_SkillOwnership.setText("******");  //set statname in textbox 
                OwnershipItemList.setText(null);
    }//GEN-LAST:event_PSClearButtonActionPerformed

    private boolean PlayerSkillsValidator() {
        if (PSPlayerIDField.getText().length() < 4) {//check for data length
            if (PSPlayerIDField.getText().matches("\\d+")){ } else { //check for numeracy
                JOptionPane.showMessageDialog(null, "Player ID entered is not numerical"); //let user know 
                return false;
            }
        } else {
            JOptionPane.showMessageDialog(null, "Player ID entered is too high\nMaximum: 999"); //let user know 
            return false;
        }
        if (PSSkillIDField.getText().length() < 4) {//check for data length
            if (PSSkillIDField.getText().matches("\\d+")){ } else { //check for numeracy
                JOptionPane.showMessageDialog(null, "Skill ID entered is not numerical"); //let user know 
                return false;
            }
        } else {
            JOptionPane.showMessageDialog(null, "Skill ID entered is too high\nMaximum: 999"); //let user know 
            return false;
        }
         if (PSIDField.getText().length() < 3) {//check for data length
            if (PSIDField.getText().matches("\\d+")){ } else { //check for numeracy
                JOptionPane.showMessageDialog(null, "Skill Ownership ID entered is not numerical"); //let user know 
                return false;
            }
        } else {
            JOptionPane.showMessageDialog(null, "Skill Ownership ID entered is too high\nMaximum: 99"); //let user know 
            return false;
        }
        String pwd = String.valueOf(ManagerPasswordField_SkillOwnership.getPassword());
        return PasswordCheck(pwd);
    }
    private void PSAddButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PSAddButtonActionPerformed
         //Start of insert button
        OwnershipLoadBar0();
        boolean Valid = PlayerSkillsValidator();
        if (Valid==true) {
            //try and make a connection to the DB using the global URL variable
            //The connection and statements objects might be better if global?
            try (Connection conn = DriverManager.getConnection(url)){  
                //Statement – Used to execute string-based SQL queries
                Statement statement = conn.createStatement();
                //maybe statement.execute? executeUpdate also works
                statement.executeUpdate("INSERT INTO PlayerSkills VALUES('" + PSIDField.getText() + "', '" + PSSkillIDField.getText() + "', '" + PSPlayerIDField.getText() + "')");
                JOptionPane.showMessageDialog(null, "Record inserted..."); //let user know 
                statement.close(); // close statement, may not be needed, probably a good thing to do
                conn.close(); //close statement, may not be needed, probably a good thing to do
            } catch (Exception e) {  
                JOptionPane.showMessageDialog(null,(e.getMessage())); //show message, good for testing, not user friendly 
            } //end try catch
            PSLoadBar100();
        }
        //end of insert button
    }//GEN-LAST:event_PSAddButtonActionPerformed

    private void PSUpdateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PSUpdateButtonActionPerformed
        //start update
        PSLoadBar0();
        boolean Valid = PlayerSkillsValidator();
        if (Valid==true) {
            //try and make a connection to the DB using the gloabal URL variable
            //The connection and statements objects might be better if global?
            try (Connection conn = DriverManager.getConnection(url)){ 
                //Statement – Used to execute string-based SQL queries
                Statement statement = conn.createStatement();
                //maybe statement.executeUpdate? execute also works
                statement.execute("UPDATE PlayerSkills SET SkillID='" + PSSkillIDField.getText() + "',PlayerID='" + PSPlayerIDField.getText() + "' WHERE OwnershipID=" + PSIDField.getText() + " ");
                JOptionPane.showMessageDialog(null, "Record updated..."); //let user know
                statement.close(); // close statement, may not be needed, probably a good thing to do 
                conn.close(); //close statement, may not be needed, probably a good thing to do
            } catch (Exception e) {  
                JOptionPane.showMessageDialog(null,(e.getMessage())); //show real error message, good for testing, not user friendly 
            } //end try catch
            PSLoadBar100();
        }
        //end of update method
    }//GEN-LAST:event_PSUpdateButtonActionPerformed
//global url for db location, use mydb for the folder and your name for the DB
    
    private int listLength(String str){  
        String x = null; // string value to be returned from method call
        //try and make a connection to the DB using the gloabal URL variable
        //The connection and statements objects might be better if global?
        try (Connection conn = DriverManager.getConnection(url)){
          String count = "SELECT COUNT(*) FROM PlayerSkills where PlayerID="+str+""; //string query called avg
          Statement st2 = conn.createStatement();
          ResultSet rs2 = st2.executeQuery(count); //result set from query
          while (rs2.next()) //rs2 is result set, use while to iterate through it
          {
            String itemavg = rs2.getString(1); //get string from location 1 in rs2
            x = itemavg; // assign string from location 1 in RS to x
          }
          st2.close(); //close statement, may not be needed, probably a good thing to do
        }
        catch (Exception e)
        {
            JOptionPane.showMessageDialog(null,(e.getMessage())); //error from try
        }
        int y = Integer.valueOf(x);
        return y; // value to be returned from method call
    }//end average method

    private void PSDisplayButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PSDisplayButtonActionPerformed
        PSItemList.setText(null);//sets the list                                        
        PSItemList.append("Skill ID \t Skill Name \t Skill Value \n");//sets the list
        
        try (Connection conn = DriverManager.getConnection(url)){ 
            String str = PSPlayerIDField.getText();  
            //PreparedStatement – Used to execute parameterized SQL queries
            PreparedStatement st = conn.prepareStatement("SELECT * from PlayerSkills where PlayerID=?");

            st.setString(1, str); //pass id string to statement, why 1? multiple statements? location?
            //Excuting Query  
            ResultSet rs = st.executeQuery(); //get result set rs by executing the Prepared Statement
            while (rs.next()) { //iterate rs
                for(int i =0; i< listLength(PSPlayerIDField.getText());i++){
                    String s = rs.getString(1); //get ID from rs, save as s 
                    String s1 = rs.getString(2); //get name from rs, save as s1 
                    String s2 = rs.getString(3); //get cost from rs, save as s2
                    PSItemList.append("" +s+"\t"+s1+"\t"+s2+"\n");//append to list
                    rs.next();
                }
            } //end while 
            //Create Exception Handler 
        } catch (Exception e) {  
                JOptionPane.showMessageDialog(null,(e.getMessage())); //error from try
        }//end try catch
    }//GEN-LAST:event_PSDisplayButtonActionPerformed
    
    private void ManagerPasswordField_PlayersFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_ManagerPasswordField_PlayersFocusLost
        JOptionPane.showMessageDialog(null, "Password Entered"); //let user know 
    }//GEN-LAST:event_ManagerPasswordField_PlayersFocusLost

    private void OwnershipDisplayButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OwnershipDisplayButtonActionPerformed
        OwnershipItemList.setText(null);//sets the list                                        
        OwnershipItemList.append("Ownership ID \t Item ID \t Player ID \n");//sets the list
        
        
        try (Connection conn = DriverManager.getConnection(url)){ 
            String str = OwnershipPlayerIDField.getText();  
            //PreparedStatement – Used to execute parameterized SQL queries
            PreparedStatement st = conn.prepareStatement("SELECT * from Ownership where PlayerID=?");

            st.setString(1, str); //pass id string to statement, why 1? multiple statements? location?
            //Excuting Query  
            ResultSet rs = st.executeQuery(); //get result set rs by executing the Prepared Statement
            while (rs.next()) { //iterate rs
                for(int i =0; i< listLength(OwnershipPlayerIDField.getText());i++){
                    String s = rs.getString(1); //get ID from rs, save as s 
                    String s1 = rs.getString(2); //get name from rs, save as s1 
                    String s2 = rs.getString(3); //get cost from rs, save as s2
                    OwnershipItemList.append("" +s+"\t"+s1+"\t"+s2+"\n");//append to list
                    rs.next();
                }
            } //end while 
            //Create Exception Handler 
        } catch (Exception e) {  
                JOptionPane.showMessageDialog(null,(e.getMessage())); //error from try
        }//end try catch
    }//GEN-LAST:event_OwnershipDisplayButtonActionPerformed

    private void ManagerPasswordField_SkillOwnershipFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_ManagerPasswordField_SkillOwnershipFocusLost
        JOptionPane.showMessageDialog(null, "Password Entered"); //let user know 
    }//GEN-LAST:event_ManagerPasswordField_SkillOwnershipFocusLost

    private void ManagerPasswordField_OwnershipFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_ManagerPasswordField_OwnershipFocusLost
        JOptionPane.showMessageDialog(null, "Password Entered"); //let user know 
    }//GEN-LAST:event_ManagerPasswordField_OwnershipFocusLost

    
    
    boolean PasswordCheck(String pwd) {
        //try and make a connection to the DB using the global URL variable
        //The connection and statements objects might be better if global?
        try (Connection conn = DriverManager.getConnection(url)){  
            //PreparedStatement – Used to execute parameterized SQL queries
            PreparedStatement st = conn.prepareStatement("select ManagerID from Players where ManagerID=?");  
            st.setString(1, pwd); //pass id string to statement, why 1? multiple statements? location?
            //Excuting Query  
            ResultSet rs = st.executeQuery(); //get result set rs by executing the Prepared Statement
            if (rs.next()) { //iterate rs
                String s = rs.getString(1); //get id from rs, save as s 
                //Sets Records in TextFields.  
                PlayerIDField.setText(s); //set id in textbox  
                return true;
            } else {  
                JOptionPane.showMessageDialog(null, "Password entered is Incorrect"); //let user know 
                return false;
            } //end if else  
        //Create Exception Handler  
        } catch (Exception e) {  
            JOptionPane.showMessageDialog(null,(e.getMessage())); //error from try
            return false;
        }//end try catch
        //end of search button
    }
    
    /**
     * Loading Bar Methods, Separated due to difficulty in passing a UI element to the method
     */
   
     
    private void ItemLoadBar0() {
        ItemProgressBar.setValue(0);
    }
    private void PlayerLoadBar0() {
        PlayerProgressBar.setValue(0);
    }
    private void SkillsLoadBar0() {
        SkillsProgressBar.setValue(0);
    }
    private void OwnershipLoadBar0() {
        OwnershipProgressBar.setValue(0);
    }
    private void PSLoadBar0() {
        PSProgressBar.setValue(0);
    }
    
    
    private void ItemLoadBar100() {
        int i = 0;
        try {
            while (i <= 100) {
                // fill the menu bar
                ItemProgressBar.setValue(i + 10);
 
                // delay the thread
                Thread.sleep(250);
                i += 10;
            }
        }
        catch (Exception e) {
        }
    }
    private void PlayerLoadBar100() {
        int i = 0;
        try {
            while (i <= 100) {
                // fill the menu bar
                PlayerProgressBar.setValue(i + 10);
 
                // delay the thread
                Thread.sleep(250);
                i += 10;
            }
        }
        catch (Exception e) {
        }
    }
    private void OwnershipLoadBar100() {
        int i = 0;
        try {
            while (i <= 100) {
                // fill the menu bar
                OwnershipProgressBar.setValue(i + 10);
 
                // delay the thread
                Thread.sleep(250);
                i += 10;
            }
        }
        catch (Exception e) {
        }
    }private void SkillsLoadBar100() {
        int i = 0;
        try {
            while (i <= 100) {
                // fill the menu bar
                SkillsProgressBar.setValue(i + 10);
 
                // delay the thread
                Thread.sleep(250);
                i += 10;
            }
        }
        catch (Exception e) {
        }
    }
    private void PSLoadBar100() {
        int i = 0;
        try {
            while (i <= 100) {
                // fill the menu bar
                PSProgressBar.setValue(i + 10);
 
                // delay the thread
                Thread.sleep(250);
                i += 10;
            }
        }
        catch (Exception e) {
        }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ItemAddButton;
    private javax.swing.JLabel ItemBackground;
    private javax.swing.JButton ItemClearButton;
    private javax.swing.JTextField ItemCostField;
    private javax.swing.JLabel ItemCostLabel;
    private javax.swing.JTextField ItemIDField;
    private javax.swing.JLabel ItemIDLabel;
    private javax.swing.JLabel ItemImage;
    private javax.swing.JLabel ItemImageBackdrop;
    private javax.swing.JLabel ItemLogo;
    private javax.swing.JTextField ItemNameField;
    private javax.swing.JLabel ItemNameLabel;
    private javax.swing.JProgressBar ItemProgressBar;
    private javax.swing.JButton ItemRemoveButton;
    private javax.swing.JButton ItemSearchButton;
    private javax.swing.JComboBox<String> ItemStatDropdown;
    private javax.swing.JLabel ItemStatLabel;
    private javax.swing.JLabel ItemStatNameLabel;
    private javax.swing.JTextField ItemStatValueField;
    private javax.swing.JButton ItemUpdateButton;
    private javax.swing.JTextField ItemWeightField;
    private javax.swing.JLabel ItemWeightLabel;
    private javax.swing.JPanel Items;
    private javax.swing.JPanel Logo;
    private javax.swing.JLabel LogoBackground;
    private javax.swing.JLabel LogoLogo;
    private javax.swing.JTabbedPane MainTabbedPane;
    private javax.swing.JPasswordField ManagerPasswordField_Items;
    private javax.swing.JPasswordField ManagerPasswordField_Ownership;
    private javax.swing.JPasswordField ManagerPasswordField_Players;
    private javax.swing.JPasswordField ManagerPasswordField_SkillOwnership;
    private javax.swing.JLabel ManagerPasswordLabel_Items;
    private javax.swing.JLabel ManagerPasswordLabel_Ownership;
    private javax.swing.JLabel ManagerPasswordLabel_Players;
    private javax.swing.JLabel ManagerPasswordLabel_SkillOwnership;
    private javax.swing.JPanel Ownership;
    private javax.swing.JButton OwnershipAddButton;
    private javax.swing.JLabel OwnershipBackground;
    private javax.swing.JButton OwnershipClearButton;
    private javax.swing.JButton OwnershipDisplayButton;
    private javax.swing.JTextField OwnershipIDField;
    private javax.swing.JLabel OwnershipIDLabel;
    private javax.swing.JTextField OwnershipItemIDField;
    private javax.swing.JLabel OwnershipItemIDLabel;
    private javax.swing.JTextArea OwnershipItemList;
    private javax.swing.JLabel OwnershipItemNameLabel;
    private javax.swing.JLabel OwnershipLogo;
    private javax.swing.JTextField OwnershipPlayerIDField;
    private javax.swing.JLabel OwnershipPlayerIDLabel;
    private javax.swing.JProgressBar OwnershipProgressBar;
    private javax.swing.JButton OwnershipRemoveButton;
    private javax.swing.JScrollPane OwnershipScrollPane;
    private javax.swing.JButton OwnershipSearchButton;
    private javax.swing.JButton OwnershipUpdateButton;
    private javax.swing.JButton PSAddButton;
    private javax.swing.JLabel PSBackground;
    private javax.swing.JButton PSClearButton;
    private javax.swing.JButton PSDisplayButton;
    private javax.swing.JTextField PSIDField;
    private javax.swing.JLabel PSIDLabel;
    private javax.swing.JTextArea PSItemList;
    private javax.swing.JLabel PSLogo;
    private javax.swing.JTextField PSPlayerIDField;
    private javax.swing.JLabel PSPlayerIDLabel;
    private javax.swing.JProgressBar PSProgressBar;
    private javax.swing.JButton PSRemoveButton;
    private javax.swing.JScrollPane PSScrollPane;
    private javax.swing.JButton PSSearchButton;
    private javax.swing.JTextField PSSkillIDField;
    private javax.swing.JLabel PSSkillIDLabel;
    private javax.swing.JButton PSUpdateButton;
    private javax.swing.JButton PlayerAddButton;
    private javax.swing.JButton PlayerClearButton;
    private javax.swing.JTextField PlayerHealthField;
    private javax.swing.JLabel PlayerHealthLabel;
    private javax.swing.JTextField PlayerIDField;
    private javax.swing.JLabel PlayerIDLabel;
    private javax.swing.JLabel PlayerImage;
    private javax.swing.JLabel PlayerImageBackground;
    private javax.swing.JLabel PlayerLevelLabel;
    private javax.swing.JSlider PlayerLevelSlider;
    private javax.swing.JTextField PlayerNameField;
    private javax.swing.JLabel PlayerNameLabel;
    private javax.swing.JProgressBar PlayerProgressBar;
    private javax.swing.JButton PlayerRemoveButton;
    private javax.swing.JButton PlayerSearchButton;
    private javax.swing.JButton PlayerUpdateButton;
    private javax.swing.JPanel Players;
    private javax.swing.JLabel PlayersBackground;
    private javax.swing.JLabel PlayersLogo;
    private javax.swing.JButton SkillSearchButton;
    private javax.swing.JPanel Skills;
    private javax.swing.JButton SkillsAddButton;
    private javax.swing.JLabel SkillsBackground;
    private javax.swing.JButton SkillsClearButton;
    private javax.swing.JTextField SkillsIDField;
    private javax.swing.JLabel SkillsIDLabel;
    private javax.swing.JLabel SkillsLogo;
    private javax.swing.JTextField SkillsNameField;
    private javax.swing.JLabel SkillsNameLabel;
    private javax.swing.JPanel SkillsOwned;
    private javax.swing.JProgressBar SkillsProgressBar;
    private javax.swing.JButton SkillsRemoveButton;
    private javax.swing.JButton SkillsUpdateButton;
    private javax.swing.JTextField SkillsValueField;
    private javax.swing.JLabel SkillsValueLabel;
    // End of variables declaration//GEN-END:variables
}
