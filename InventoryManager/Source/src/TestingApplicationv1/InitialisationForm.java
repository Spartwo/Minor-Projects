package TestingApplicationv1;

import java.io.File;
import java.sql.*;

/*
 * @author Spartwo
 */

public class InitialisationForm extends javax.swing.JFrame {
    /**
     * Creates new form tempjform
     */
    public InitialisationForm() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        CreateDBButton = new javax.swing.JButton();
        StartProgramButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(null);

        CreateDBButton.setBackground(new java.awt.Color(195, 176, 103));
        CreateDBButton.setFont(new java.awt.Font("Papyrus", 0, 14)); // NOI18N
        CreateDBButton.setText("Create DB and Populate");
        CreateDBButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CreateDBButtonActionPerformed(evt);
            }
        });
        getContentPane().add(CreateDBButton);
        CreateDBButton.setBounds(40, 110, 263, 41);

        StartProgramButton.setBackground(new java.awt.Color(195, 176, 103));
        StartProgramButton.setFont(new java.awt.Font("Papyrus", 0, 14)); // NOI18N
        StartProgramButton.setText("Start Program");
        StartProgramButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StartProgramButtonActionPerformed(evt);
            }
        });
        getContentPane().add(StartProgramButton);
        StartProgramButton.setBounds(40, 40, 263, 41);

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/TestingApplicationv1/Background.png"))); // NOI18N
        jLabel1.setText("jLabel1");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(-6, -6, 350, 200);

        setBounds(0, 0, 362, 233);
    }// </editor-fold>//GEN-END:initComponents

    private void CreateDBButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CreateDBButtonActionPerformed
    //start of button
        
        new File("c:/mydb/").mkdir(); //creates the folder were the DB will be saved.
        String url = "jdbc:sqlite:c:/mydb/kwhite.db"; //creates a URL for the database
        
        try { //loads driver into memory, just one way of doing it
            Class.forName("org.sqlite.JDBC").newInstance(); 
          } catch (Exception ex) {
        }//end try catch
        
        //Makes a connection called conn to the url created earlier
        try (Connection conn = DriverManager.getConnection(url)) {
            if (conn != null) { //if the connection is not null 
                CreateDBButton.setText("The database has been created."); //change the text on the create DB button
            }//end if
        } catch (SQLException e) {
            System.out.println(e.getMessage()); //println for catching error, popup would be better
        }//end try catch

                //string to be passes as a statement, creates the table warehouses
                String sql1 = "CREATE TABLE IF NOT EXISTS Items (\n"
                + "	ItemID Int(3) NOT NULL,\n"
                + "	ItemName varchar(255),\n"
                + "	ItemCost Int(6),\n"
                + "	ItemWeight Int(5),\n"
                + "	ItemStatName varchar(255),\n"
                + "	ItemStatValue Int(3),\n"
                + "	PRIMARY KEY (ItemID)\n"
                + "	);\n";
                        
                String sql2 = "CREATE TABLE IF NOT EXISTS Players (\n"
                + "	PlayerID Int(3) NOT NULL,\n"
                + "	PlayerName varchar(255),\n"
                + "	PlayerHealth varchar(4),\n"
                + "	PlayerLevel TinyInt(2),\n"
                + "	ManagerID String(15),\n"
                + "	PRIMARY KEY (PlayerID)\n"
                + "	);\n";
                        
                String sql3 = "CREATE TABLE IF NOT EXISTS Skills (\n"
                + "	SkillID Int(3) NOT NULL,\n"
                + "	SkillName varchar(255),\n"
                + "	SkillPointValue TinyInt(2),\n"
                + "	PRIMARY KEY (SkillID)\n"
                + "	);\n";

                String sql4 = "CREATE TABLE IF NOT EXISTS Ownership (\n"
                + "	OwnershipID TinyInt(2) NOT NULL,\n"
                + "	ItemID Int(3),\n"
                + "	PlayerID Int(3),\n"
                + "	PRIMARY KEY (OwnershipID),\n"
                + "	FOREIGN KEY (ItemID) REFERENCES Items(ItemID),\n"
                + "	FOREIGN KEY (PlayerID) REFERENCES Players(PlayerID)\n"
                + "	);\n";

                String sql5 = "CREATE TABLE IF NOT EXISTS PlayerSkills (\n"
                + "	SkillOwnID TinyInt(2) NOT NULL,\n"
                + "	SkillID Int(3),\n"
                + "	PlayerID varchar(255),\n"
                + "	PRIMARY KEY (SkillOwnID),\n"
                + "	FOREIGN KEY (SkillID) REFERENCES Skills(SkillID),\n"
                + "	FOREIGN KEY (PlayerID) REFERENCES Players(PlayerID)\n"
                + "	);\n";
        
        //Makes a connection called conn to the url created earlier
        //may not be needed again if used already, no harm in retrying
        try (Connection conn = DriverManager.getConnection(url);
        Statement stmt = conn.createStatement()) { //makes a statement object called stmt
        stmt.execute(sql1); //passes the sql string statement to stmt
        stmt.execute(sql2); //passes the sql string statement to stmt
        stmt.execute(sql3); //passes the sql string statement to stmt
        stmt.execute(sql4); //passes the sql string statement to stmt
        stmt.execute(sql5); //passes the sql string statement to stmt
        } catch (SQLException e) {
        System.out.println(e.getMessage()); //println for catching error, popup would be better
        }//end try catch
            
        Statement stmt = null; //clear stmt after first usage
        //Makes a connection called conn to the url created earlier
        //may not be needed again if used already, no harm in retrying
        try {Connection conn = DriverManager.getConnection(url);
        stmt = conn.createStatement();
        //add to items table
        stmt.executeUpdate("INSERT INTO Items (ItemID, ItemName, ItemCost, ItemWeight, ItemStatName, ItemStatValue)\nVALUES\n " 
                + "('001','Gold','1','1','Kinetic','0'),\n"
                + "('002','Battleaxe of Draining','1400','5','Poison','40'),\n"
                + "('003','Chest Plate','1300','15','Kinetic','40'),\n"
                + "('004','Dagger hot','1200','5','Fire','40'),\n"
                + "('005','Evanâ€™s Frostbite Gauntlets','1100','21','Frost','40'),\n"
                + "('006','Flaming Blade','1000','11','Fire','40'),\n"
                + "('007','Greataxe','900','8','Frost','40'),\n"
                + "('008','Helmet of Poison Resistance','800','2','Poison','140'),\n"
                + "('009','Index Shield','700','7','Kinetic','93'),\n"
                + "('010','Javelin of Frost','600','15','Frost','40')\n"
                );
        //add to players table
        stmt.executeUpdate("INSERT INTO Players (PlayerID, PlayerName, PlayerHealth, PlayerLevel, ManagerID)\nVALUES\n " 
                + "('001','Adam','100','21','00'),\n"
                + "('002','Brian','100','12','00'),\n"
                + "('003','Craig','100','15','00'),\n"
                + "('004','David','100','5','00'),\n"
                + "('005','Evan','100','21','Tomato'),\n"
                + "('006','Fredward','10','11','00'),\n"
                + "('007','Greg','100','8','00'),\n"
                + "('008','Harry','100','2','00'),\n"
                + "('009','Ian','100','7','Potato'),\n"
                + "('010','James','100','15','00')\n"
                );
        //add to skills table
        stmt.executeUpdate("INSERT INTO Skills (SkillID, SkillName, SkillPointValue)\nVALUES\n " 
                + "('1','A','50'),\n"
                + "('2','B','50'),\n"
                + "('3','C','10'),\n"
                + "('4','D','50'),\n"
                + "('5','E','20'),\n"
                + "('6','F','10'),\n"
                + "('7','G','80'),\n"
                + "('8','G','20'),\n"
                + "('9','I','70'),\n"
                + "('10','J','10')\n"
                );
        //add to ownership table as provision
        stmt.executeUpdate("INSERT INTO Ownership (OwnershipID, ItemID, PlayerID)\nVALUES\n " 
                + "('1','1','1'),\n"
                );
        //add to skillsownership table
        stmt.executeUpdate("INSERT INTO PlayerSkills (SkillOwnID, SkillID, PlayerID)\nVALUES\n " 
                + "('1','1','1'),\n"
                );
        
        } catch (SQLException e) {
            System.out.print(e); //println for catching error, popup would be better
        }//end try catch
    //end button press
    }//GEN-LAST:event_CreateDBButtonActionPerformed

    private void StartProgramButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StartProgramButtonActionPerformed
        //start of button
        this.dispose(); //dispose of the first frame
        MainForm.main(null); //open the second frame and pass no argument
        //end button press
    }//GEN-LAST:event_StartProgramButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(InitialisationForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(InitialisationForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(InitialisationForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(InitialisationForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new InitialisationForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JButton CreateDBButton;
    private javax.swing.JButton StartProgramButton;
    private javax.swing.JLabel jLabel1;
    // End of variables declaration//GEN-END:variables
}
