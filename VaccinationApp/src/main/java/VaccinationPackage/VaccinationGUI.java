/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

package VaccinationPackage;
import java.time.LocalDate;
import java.time.Year;
import java.util.Calendar;
import javax.swing.JOptionPane;


/**
 *
 * @author Kyle White - x21226695
 */
public class VaccinationGUI extends javax.swing.JFrame {

    private static QueueManager q;
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        MainTabbedPane = new javax.swing.JTabbedPane();
        Queue = new javax.swing.JPanel();
        QueueShowButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        QueueDisplayTable = new javax.swing.JTable();
        OwnershipScrollPane1 = new javax.swing.JScrollPane();
        QueueList = new javax.swing.JTextArea();
        Add = new javax.swing.JPanel();
        AddNameLabel = new javax.swing.JLabel();
        AddDOBLabel = new javax.swing.JLabel();
        AddClearButton = new javax.swing.JButton();
        AddSubmitButton = new javax.swing.JButton();
        AddNameField = new javax.swing.JTextField();
        AddTimeDayField = new javax.swing.JTextField();
        AddTimeMonthField = new javax.swing.JTextField();
        AddTimeYearField = new javax.swing.JTextField();
        AddPECToggleLabel2 = new javax.swing.JLabel();
        AddSurnameField = new javax.swing.JTextField();
        AddPECButton = new javax.swing.JToggleButton();
        AddSurnameLabel2 = new javax.swing.JLabel();
        AddPECToggleLabel1 = new javax.swing.JLabel();
        List = new javax.swing.JPanel();
        OwnershipScrollPane = new javax.swing.JScrollPane();
        PatientList = new javax.swing.JTextArea();
        ListPrioritySlider = new javax.swing.JSlider();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        ListDisplayTable = new javax.swing.JTable();
        PatientListCount = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(102, 204, 255));

        MainTabbedPane.setBackground(new java.awt.Color(0, 102, 255));
        MainTabbedPane.setForeground(new java.awt.Color(255, 255, 255));
        MainTabbedPane.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N

        Queue.setBackground(new java.awt.Color(153, 153, 255));
        Queue.setLayout(null);

        QueueShowButton.setBackground(new java.awt.Color(0, 102, 255));
        QueueShowButton.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        QueueShowButton.setForeground(new java.awt.Color(255, 255, 255));
        QueueShowButton.setText("Show Highest Priority Group");
        QueueShowButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                QueueShowButtonActionPerformed(evt);
            }
        });
        Queue.add(QueueShowButton);
        QueueShowButton.setBounds(20, 270, 480, 35);

        QueueDisplayTable.setBackground(new java.awt.Color(255, 255, 255));
        QueueDisplayTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Priority"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        QueueDisplayTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(QueueDisplayTable);

        Queue.add(jScrollPane1);
        jScrollPane1.setBounds(20, 40, 480, 25);

        OwnershipScrollPane1.setBackground(new java.awt.Color(0, 102, 255));

        QueueList.setBackground(new java.awt.Color(255, 255, 255));
        QueueList.setColumns(20);
        QueueList.setForeground(new java.awt.Color(51, 51, 51));
        QueueList.setLineWrap(true);
        QueueList.setRows(3);
        OwnershipScrollPane1.setViewportView(QueueList);

        Queue.add(OwnershipScrollPane1);
        OwnershipScrollPane1.setBounds(20, 65, 480, 200);

        MainTabbedPane.addTab("Queue", Queue);

        Add.setBackground(new java.awt.Color(153, 153, 255));
        Add.setLayout(null);

        AddNameLabel.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        AddNameLabel.setForeground(new java.awt.Color(255, 255, 255));
        AddNameLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        AddNameLabel.setText("First Name");
        Add.add(AddNameLabel);
        AddNameLabel.setBounds(25, 40, 100, 30);

        AddDOBLabel.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        AddDOBLabel.setForeground(new java.awt.Color(255, 255, 255));
        AddDOBLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        AddDOBLabel.setText("Date of Birth");
        Add.add(AddDOBLabel);
        AddDOBLabel.setBounds(25, 190, 100, 30);

        AddClearButton.setBackground(new java.awt.Color(0, 102, 255));
        AddClearButton.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        AddClearButton.setForeground(new java.awt.Color(255, 255, 255));
        AddClearButton.setText("Clear Fields");
        AddClearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddClearButtonActionPerformed(evt);
            }
        });
        Add.add(AddClearButton);
        AddClearButton.setBounds(278, 270, 120, 35);

        AddSubmitButton.setBackground(new java.awt.Color(0, 102, 255));
        AddSubmitButton.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        AddSubmitButton.setForeground(new java.awt.Color(255, 255, 255));
        AddSubmitButton.setText("Submit");
        AddSubmitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddSubmitButtonActionPerformed(evt);
            }
        });
        Add.add(AddSubmitButton);
        AddSubmitButton.setBounds(145, 270, 120, 35);

        AddNameField.setBackground(new java.awt.Color(255, 255, 255));
        AddNameField.setFont(new java.awt.Font("Arial", 1, 10)); // NOI18N
        AddNameField.setForeground(new java.awt.Color(51, 51, 51));
        AddNameField.setText("Enter First Name");
        Add.add(AddNameField);
        AddNameField.setBounds(145, 40, 254, 30);

        AddTimeDayField.setBackground(new java.awt.Color(255, 255, 255));
        AddTimeDayField.setFont(new java.awt.Font("Arial", 1, 10)); // NOI18N
        AddTimeDayField.setForeground(new java.awt.Color(51, 51, 51));
        AddTimeDayField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        AddTimeDayField.setText("Day(25)");
        AddTimeDayField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                AddTimeDayFieldKeyTyped(evt);
            }
        });
        Add.add(AddTimeDayField);
        AddTimeDayField.setBounds(315, 190, 84, 30);

        AddTimeMonthField.setBackground(new java.awt.Color(255, 255, 255));
        AddTimeMonthField.setFont(new java.awt.Font("Arial", 1, 10)); // NOI18N
        AddTimeMonthField.setForeground(new java.awt.Color(51, 51, 51));
        AddTimeMonthField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        AddTimeMonthField.setText("Month(12)");
        AddTimeMonthField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                AddTimeMonthFieldKeyTyped(evt);
            }
        });
        Add.add(AddTimeMonthField);
        AddTimeMonthField.setBounds(230, 190, 84, 30);

        AddTimeYearField.setBackground(new java.awt.Color(255, 255, 255));
        AddTimeYearField.setFont(new java.awt.Font("Arial", 1, 10)); // NOI18N
        AddTimeYearField.setForeground(new java.awt.Color(51, 51, 51));
        AddTimeYearField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        AddTimeYearField.setText("Year(2024)");
        AddTimeYearField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                AddTimeYearFieldKeyTyped(evt);
            }
        });
        Add.add(AddTimeYearField);
        AddTimeYearField.setBounds(145, 190, 84, 30);

        AddPECToggleLabel2.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        AddPECToggleLabel2.setForeground(new java.awt.Color(255, 255, 255));
        AddPECToggleLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        AddPECToggleLabel2.setText("Conditions");
        Add.add(AddPECToggleLabel2);
        AddPECToggleLabel2.setBounds(15, 155, 110, 15);

        AddSurnameField.setBackground(new java.awt.Color(255, 255, 255));
        AddSurnameField.setFont(new java.awt.Font("Arial", 1, 10)); // NOI18N
        AddSurnameField.setForeground(new java.awt.Color(51, 51, 51));
        AddSurnameField.setText("Enter Surname");
        Add.add(AddSurnameField);
        AddSurnameField.setBounds(145, 90, 254, 30);

        AddPECButton.setBackground(new java.awt.Color(153, 204, 255));
        AddPECButton.setFont(new java.awt.Font("Arial", 1, 10)); // NOI18N
        AddPECButton.setForeground(new java.awt.Color(0, 0, 0));
        AddPECButton.setText("Present");
        AddPECButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                AddPECButtonMouseClicked(evt);
            }
        });
        Add.add(AddPECButton);
        AddPECButton.setBounds(145, 140, 254, 30);

        AddSurnameLabel2.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        AddSurnameLabel2.setForeground(new java.awt.Color(255, 255, 255));
        AddSurnameLabel2.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        AddSurnameLabel2.setText("Surname");
        Add.add(AddSurnameLabel2);
        AddSurnameLabel2.setBounds(25, 90, 100, 30);

        AddPECToggleLabel1.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        AddPECToggleLabel1.setForeground(new java.awt.Color(255, 255, 255));
        AddPECToggleLabel1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        AddPECToggleLabel1.setText("Pre-Existing");
        Add.add(AddPECToggleLabel1);
        AddPECToggleLabel1.setBounds(15, 140, 110, 15);

        MainTabbedPane.addTab("Add", Add);

        List.setBackground(new java.awt.Color(153, 153, 255));
        List.setLayout(null);

        OwnershipScrollPane.setBackground(new java.awt.Color(0, 102, 255));

        PatientList.setBackground(new java.awt.Color(255, 255, 255));
        PatientList.setColumns(20);
        PatientList.setForeground(new java.awt.Color(51, 51, 51));
        PatientList.setLineWrap(true);
        PatientList.setRows(3);
        OwnershipScrollPane.setViewportView(PatientList);

        List.add(OwnershipScrollPane);
        OwnershipScrollPane.setBounds(20, 105, 480, 160);

        ListPrioritySlider.setBackground(new java.awt.Color(153, 153, 255));
        ListPrioritySlider.setForeground(new java.awt.Color(255, 255, 255));
        ListPrioritySlider.setMajorTickSpacing(1);
        ListPrioritySlider.setMaximum(10);
        ListPrioritySlider.setMinimum(1);
        ListPrioritySlider.setMinorTickSpacing(1);
        ListPrioritySlider.setPaintLabels(true);
        ListPrioritySlider.setPaintTicks(true);
        ListPrioritySlider.setSnapToTicks(true);
        ListPrioritySlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                ListPrioritySliderStateChanged(evt);
            }
        });
        List.add(ListPrioritySlider);
        ListPrioritySlider.setBounds(20, 30, 480, 44);

        jLabel1.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Priority");
        List.add(jLabel1);
        jLabel1.setBounds(20, 10, 480, 20);

        ListDisplayTable.setBackground(new java.awt.Color(255, 255, 255));
        ListDisplayTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Age", "Pre-Existing Conditions"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Double.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        ListDisplayTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(ListDisplayTable);

        List.add(jScrollPane2);
        jScrollPane2.setBounds(20, 80, 480, 25);

        PatientListCount.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        PatientListCount.setForeground(new java.awt.Color(255, 255, 255));
        PatientListCount.setText("Displaying:");
        List.add(PatientListCount);
        PatientListCount.setBounds(25, 275, 220, 35);

        MainTabbedPane.addTab("List", List);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(MainTabbedPane, javax.swing.GroupLayout.PREFERRED_SIZE, 520, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(MainTabbedPane, javax.swing.GroupLayout.PREFERRED_SIZE, 366, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void QueueShowButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_QueueShowButtonActionPerformed
        queueShow();
    }//GEN-LAST:event_QueueShowButtonActionPerformed

    public static boolean isNumeric(String strNum) {
        if (strNum == null) {
            return false;
        }
        try {
            double d = Double.parseDouble(strNum);
        } catch (NumberFormatException nfe) {
            return false;
        }
        return true;
    }
    
    private void AddSubmitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddSubmitButtonActionPerformed
        //Start of insert button
        boolean validEntry = true;
        String missingData = "Invalid Patient Values";


        String addName = AddNameField.getText();
        String addSurname = AddSurnameField.getText();
        Boolean addPEC = AddPECButton.getText().matches("Present");
        String addDay = AddTimeDayField.getText();
        String addMonth = AddTimeMonthField.getText();
        String addYear = AddTimeYearField.getText();
        String testTime =  addDay + addMonth + addYear; 
        
        int day = 0;
        int month = 0; 
        int year = 0;
                
        if (addName.matches("Enter First Name") || addName.matches("")) {
            missingData = String.join("\n", missingData, "No first name provided");
            validEntry = false;
        }
        if (addSurname.matches("Enter Surname") || addSurname.matches("")) {
            missingData = String.join("\n", missingData, "No surnname provided");
            validEntry = false;
        }
        if (testTime.contains("Day") || testTime.contains("Month") || testTime.contains("Year") || addDay.matches("") || addMonth.matches("") || addYear.matches("")) {
            missingData = String.join("\n", missingData, "Invalid Date of Birth provided");
            validEntry = false;
        } else {
            //integer conversions
            day = Integer.parseInt(addDay);
            month = Integer.parseInt(addMonth);
            year = Integer.parseInt(addYear);
            
            if(day == 0 || month == 0 || year == 0 || month > 12 || year > Year.now().getValue()) {
                //if past december of greater than current year
                validEntry = false;
            } else {
                //I HATE THE GREGORIAN CALENDAR I HATE THE GREGORIAN CALENDAR
                int maxDay;
                switch(month) {
                    case 2: 
                        Calendar cal = Calendar.getInstance();
                        cal.set(Calendar.YEAR, year);
                        if(cal.getActualMaximum(Calendar.DAY_OF_YEAR) > 365) {
                            maxDay = 29;
                        } else {
                            maxDay = 28;
                        }
                        break;
                    case 4: 
                        maxDay = 30;
                        break;
                    case 6: 
                        maxDay = 30;
                        break;
                    case 9: 
                        maxDay = 30;
                        break;
                    default: 
                        maxDay = 31;
                        break;
                }
                
                if(day > maxDay) validEntry = false;
            }
            
            if (!validEntry) missingData = String.join("\n", missingData, "Invalid Date of Birth provided");
        }

        if (validEntry) {
            LocalDate DOB = LocalDate.of(year, month, day); 
            q.createPatient(addName, addSurname, DOB, addPEC);
            q.saveData();
            JOptionPane.showMessageDialog(null, "New Patient Added");
        } else {
            JOptionPane.showMessageDialog(null, missingData);
        }
    }//GEN-LAST:event_AddSubmitButtonActionPerformed

    private void AddClearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddClearButtonActionPerformed
        AddNameField.setText("Enter First Name");                                         
        AddSurnameField.setText("Enter Surname");                                    
        AddPECButton.setText("Absent");
        //set datetime boxes
        AddTimeDayField.setText("Day(25)");
        AddTimeMonthField.setText("Month(12)");
        AddTimeYearField.setText("Year(2024)");
    }//GEN-LAST:event_AddClearButtonActionPerformed

    private void AddTimeDayFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_AddTimeDayFieldKeyTyped
        //permit only numerical inputs in date fields
        char c = evt.getKeyChar();
        if(!Character.isDigit(c)) evt.consume();
    }//GEN-LAST:event_AddTimeDayFieldKeyTyped

    private void AddTimeMonthFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_AddTimeMonthFieldKeyTyped
        //permit only numerical inputs in date fields
        char c = evt.getKeyChar();
        if(!Character.isDigit(c)) evt.consume();
    }//GEN-LAST:event_AddTimeMonthFieldKeyTyped

    private void AddTimeYearFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_AddTimeYearFieldKeyTyped
        //permit only numerical inputs in date fields
        char c = evt.getKeyChar();
        if(!Character.isDigit(c)) evt.consume();
    }//GEN-LAST:event_AddTimeYearFieldKeyTyped

    private void AddPECButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_AddPECButtonMouseClicked
        //text based button toggle for pre-existing conditions
        if(AddPECButton.getText().matches("Present")) {
            AddPECButton.setText("Absent");
        } else { 
             AddPECButton.setText("Present");
        }
    }//GEN-LAST:event_AddPECButtonMouseClicked

    private void ListPrioritySliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_ListPrioritySliderStateChanged
        //call the list printer
        listShow();
    }//GEN-LAST:event_ListPrioritySliderStateChanged
    
    private void listShow() {
        int searchValue = ListPrioritySlider.getValue();
        PatientList.setText(q.printList(searchValue));
        PatientListCount.setText("Displaying: " + q.getCount(searchValue));
    }
    
    private void queueShow() {
        int priority = q.getHighestPriority();
        QueueList.setText(q.printQueue(priority));
        q.removeBatch(priority);
    }
    
    public VaccinationGUI() {
        initComponents();
        q = new QueueManager();
        //autopopulate list so displays on tab swap
        listShow();
        
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

}
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VaccinationGUI.class  

.getName()).log(java.util.logging.Level.SEVERE, null, ex);

} catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VaccinationGUI.class  

.getName()).log(java.util.logging.Level.SEVERE, null, ex);

} catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VaccinationGUI.class  

.getName()).log(java.util.logging.Level.SEVERE, null, ex);

} catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VaccinationGUI.class  

.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        
        
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel Add;
    private javax.swing.JButton AddClearButton;
    private javax.swing.JLabel AddDOBLabel;
    private javax.swing.JTextField AddNameField;
    private javax.swing.JLabel AddNameLabel;
    private javax.swing.JToggleButton AddPECButton;
    private javax.swing.JLabel AddPECToggleLabel1;
    private javax.swing.JLabel AddPECToggleLabel2;
    private javax.swing.JButton AddSubmitButton;
    private javax.swing.JTextField AddSurnameField;
    private javax.swing.JLabel AddSurnameLabel2;
    private javax.swing.JTextField AddTimeDayField;
    private javax.swing.JTextField AddTimeMonthField;
    private javax.swing.JTextField AddTimeYearField;
    private javax.swing.JPanel List;
    private javax.swing.JTable ListDisplayTable;
    private javax.swing.JSlider ListPrioritySlider;
    private javax.swing.JTabbedPane MainTabbedPane;
    private javax.swing.JScrollPane OwnershipScrollPane;
    private javax.swing.JScrollPane OwnershipScrollPane1;
    private javax.swing.JTextArea PatientList;
    private javax.swing.JLabel PatientListCount;
    private javax.swing.JPanel Queue;
    private javax.swing.JTable QueueDisplayTable;
    private javax.swing.JTextArea QueueList;
    private javax.swing.JButton QueueShowButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables
}
